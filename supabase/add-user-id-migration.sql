-- ============================================
-- ÏÇ¨Ïö©ÏûêÎ≥Ñ Îç∞Ïù¥ÌÑ∞ Í≤©Î¶¨Î•º ÏúÑÌïú user_id Ï∂îÍ∞Ä ÎßàÏù¥Í∑∏Î†àÏù¥ÏÖò
-- ============================================

-- 1. Î™®Îì† ÌÖåÏù¥Î∏îÏóê user_id Ïª¨Îüº Ï∂îÍ∞Ä
ALTER TABLE clients ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;
ALTER TABLE estimates ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;
ALTER TABLE estimate_items ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;
ALTER TABLE invoices ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;
ALTER TABLE invoice_items ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;
ALTER TABLE work_items ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;
ALTER TABLE company_info ADD COLUMN IF NOT EXISTS user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE;

-- 2. user_id Ïù∏Îç±Ïä§ ÏÉùÏÑ± (ÏÑ±Îä• ÏµúÏ†ÅÌôî)
CREATE INDEX IF NOT EXISTS idx_clients_user_id ON clients(user_id);
CREATE INDEX IF NOT EXISTS idx_estimates_user_id ON estimates(user_id);
CREATE INDEX IF NOT EXISTS idx_estimate_items_user_id ON estimate_items(user_id);
CREATE INDEX IF NOT EXISTS idx_invoices_user_id ON invoices(user_id);
CREATE INDEX IF NOT EXISTS idx_invoice_items_user_id ON invoice_items(user_id);
CREATE INDEX IF NOT EXISTS idx_work_items_user_id ON work_items(user_id);
CREATE INDEX IF NOT EXISTS idx_company_info_user_id ON company_info(user_id);

-- 3. Row Level Security (RLS) ÌôúÏÑ±Ìôî
ALTER TABLE clients ENABLE ROW LEVEL SECURITY;
ALTER TABLE estimates ENABLE ROW LEVEL SECURITY;
ALTER TABLE estimate_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE invoices ENABLE ROW LEVEL SECURITY;
ALTER TABLE invoice_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE work_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE company_info ENABLE ROW LEVEL SECURITY;

-- 4. RLS Ï†ïÏ±Ö ÏÉùÏÑ± (ÏÇ¨Ïö©ÏûêÎäî ÏûêÏã†Ïùò Îç∞Ïù¥ÌÑ∞Îßå Ï†ëÍ∑º Í∞ÄÎä•)

-- clients Ï†ïÏ±Ö
CREATE POLICY "Users can view their own clients"
  ON clients FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own clients"
  ON clients FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own clients"
  ON clients FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own clients"
  ON clients FOR DELETE
  USING (auth.uid() = user_id);

-- estimates Ï†ïÏ±Ö
CREATE POLICY "Users can view their own estimates"
  ON estimates FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own estimates"
  ON estimates FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own estimates"
  ON estimates FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own estimates"
  ON estimates FOR DELETE
  USING (auth.uid() = user_id);

-- estimate_items Ï†ïÏ±Ö
CREATE POLICY "Users can view their own estimate_items"
  ON estimate_items FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own estimate_items"
  ON estimate_items FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own estimate_items"
  ON estimate_items FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own estimate_items"
  ON estimate_items FOR DELETE
  USING (auth.uid() = user_id);

-- invoices Ï†ïÏ±Ö
CREATE POLICY "Users can view their own invoices"
  ON invoices FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own invoices"
  ON invoices FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own invoices"
  ON invoices FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own invoices"
  ON invoices FOR DELETE
  USING (auth.uid() = user_id);

-- invoice_items Ï†ïÏ±Ö
CREATE POLICY "Users can view their own invoice_items"
  ON invoice_items FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own invoice_items"
  ON invoice_items FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own invoice_items"
  ON invoice_items FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own invoice_items"
  ON invoice_items FOR DELETE
  USING (auth.uid() = user_id);

-- work_items Ï†ïÏ±Ö
CREATE POLICY "Users can view their own work_items"
  ON work_items FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own work_items"
  ON work_items FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own work_items"
  ON work_items FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own work_items"
  ON work_items FOR DELETE
  USING (auth.uid() = user_id);

-- company_info Ï†ïÏ±Ö
CREATE POLICY "Users can view their own company_info"
  ON company_info FOR SELECT
  USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own company_info"
  ON company_info FOR INSERT
  WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update their own company_info"
  ON company_info FOR UPDATE
  USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own company_info"
  ON company_info FOR DELETE
  USING (auth.uid() = user_id);

-- 5. ÏôÑÎ£å Î©îÏãúÏßÄ
DO $$
BEGIN
  RAISE NOTICE '‚úÖ Migration completed successfully!';
  RAISE NOTICE 'üë§ User ID columns added to all tables';
  RAISE NOTICE 'üîí Row Level Security enabled';
  RAISE NOTICE 'üõ°Ô∏è RLS policies created for user data isolation';
END $$;

{"version":3,"file":"static/js/686.1d698c08.chunk.js","mappings":"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","sources":["utils/secureStorage.legacy.ts","utils/securityMigration.ts"],"sourcesContent":["/**\n * 보안 강화된 localStorage 래퍼\n * XSS 공격으로부터 민감한 데이터를 보호하기 위해 암호화를 적용\n */\n\nimport { KIB } from '../constants/units';\n\n// 간단한 XOR 암호화 (데모용 - 실제 운영에서는 더 강력한 암호화 사용 권장)\nconst ENCRYPTION_KEY = 'CMS_2024_SECURE_KEY';\nconst SHIFT_5 = 5; // eslint-disable-line no-magic-numbers\nconst MASK_32 = 0xffffffff; // eslint-disable-line no-magic-numbers\nconst RADIX_36 = 36; // eslint-disable-line no-magic-numbers\nconst MAX_MIB = 5; // eslint-disable-line no-magic-numbers\n\n/**\n * 암호화된 데이터 구조\n */\ninterface EncryptedData {\n  encrypted: string;\n  checksum: string;\n  timestamp: number;\n}\n\n/**\n * 저장소 사용 현황\n */\ninterface StorageInfo {\n  totalSize: string;\n  itemCount: number;\n  quotaExceeded: boolean;\n}\n\n/**\n * 문자열을 XOR 암호화합니다\n * @param text - 암호화할 텍스트\n * @param key - 암호화 키\n * @returns 암호화된 텍스트\n */\nfunction xorEncrypt(text: string, key: string): string {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    result += String.fromCharCode(text.charCodeAt(i) ^ key.charCodeAt(i % key.length));\n  }\n  return btoa(result); // Base64 인코딩\n}\n\n/**\n * XOR 암호화된 문자열을 복호화합니다\n * @param encryptedText - 암호화된 텍스트\n * @param key - 복호화 키\n * @returns 복호화된 텍스트\n */\nfunction xorDecrypt(encryptedText: string, key: string): string | null {\n  try {\n    const decoded = atob(encryptedText); // Base64 디코딩\n    let result = '';\n    for (let i = 0; i < decoded.length; i++) {\n      result += String.fromCharCode(decoded.charCodeAt(i) ^ key.charCodeAt(i % key.length));\n    }\n    return result;\n  } catch (error) {\n    return null;\n  }\n}\n\n/**\n * 데이터 무결성 검증을 위한 체크섬 생성\n * @param data - 체크섬을 생성할 데이터\n * @returns 체크섬\n */\nfunction generateChecksum(data: string): string {\n  let checksum = 0;\n  for (let i = 0; i < data.length; i++) {\n    checksum = ((checksum << SHIFT_5) - checksum + data.charCodeAt(i)) & MASK_32;\n  }\n  return checksum.toString(RADIX_36);\n}\n\n/**\n * 민감한 데이터인지 확인\n * @param key - localStorage 키\n * @returns 민감한 데이터 여부\n */\nfunction isSensitiveData(key: string): boolean {\n  const sensitiveKeys = [\n    'CMS_USERS',\n    'CURRENT_USER', \n    'CMS_DISABLE_LOGIN',\n    'CMS_LOGOUT',\n    'constructionApp_stampImage'\n  ];\n  return sensitiveKeys.some(sensitiveKey => key.includes(sensitiveKey));\n}\n\n/**\n * 보안 강화된 setItem\n * @param key - 저장할 키\n * @param value - 저장할 값\n */\nexport function setSecureItem(key: string, value: string): void {\n  try {\n    if (typeof window === 'undefined' || window.localStorage == null) {\n      return;\n    }\n\n    let dataToStore = value;\n    \n    // 민감한 데이터는 암호화\n    if (isSensitiveData(key)) {\n      const encrypted = xorEncrypt(value, ENCRYPTION_KEY);\n      const checksum = generateChecksum(value);\n      const encryptedData: EncryptedData = {\n        encrypted: encrypted,\n        checksum: checksum,\n        timestamp: Date.now()\n      };\n      dataToStore = JSON.stringify(encryptedData);\n    }\n\n    window.localStorage.setItem(key, dataToStore);\n  } catch (error) {\n    // Silently handle storage errors in production\n  }\n}\n\n/**\n * 보안 강화된 getItem\n * @param key - 가져올 키\n * @returns 복호화된 값 또는 null\n */\nexport function getSecureItem(key: string): string | null {\n  try {\n    if (typeof window === 'undefined' || window.localStorage == null) {\n      return null;\n    }\n\n    const rawData = window.localStorage.getItem(key);\n    if (rawData === null) return null;\n\n    // 민감한 데이터가 아니면 그대로 반환\n    if (isSensitiveData(key) === false) {\n      return rawData;\n    }\n\n    // 민감한 데이터는 복호화\n    try {\n      const parsedData: EncryptedData = JSON.parse(rawData);\n      if (parsedData.encrypted == null || parsedData.checksum == null) {\n        // 구버전 데이터 - 그대로 반환 (마이그레이션 목적)\n        return rawData;\n      }\n\n      const decrypted = xorDecrypt(parsedData.encrypted, ENCRYPTION_KEY);\n      if (decrypted === null) return null;\n\n      // 무결성 검증\n      const expectedChecksum = generateChecksum(decrypted);\n      if (expectedChecksum !== parsedData.checksum) {\n        return null;\n      }\n\n      return decrypted;\n    } catch (parseError) {\n      // JSON 파싱 실패 시 구버전 데이터로 간주\n      return rawData;\n    }\n  } catch (error) {\n    return null;\n  }\n}\n\n/**\n * 보안 강화된 removeItem\n * @param key - 삭제할 키\n */\nexport function removeSecureItem(key: string): void {\n  try {\n    if (typeof window === 'undefined' || window.localStorage == null) {\n      return;\n    }\n    window.localStorage.removeItem(key);\n  } catch (error) {\n    // Silently handle removal errors\n  }\n}\n\n/**\n * 모든 민감한 데이터를 암호화된 형태로 마이그레이션\n */\nexport function migrateSensitiveData(): void {\n  try {\n    if (typeof window === 'undefined' || window.localStorage == null) {\n      return;\n    }\n\n    const sensitiveKeys = ['CMS_USERS', 'CURRENT_USER', 'CMS_DISABLE_LOGIN', 'constructionApp_stampImage'];\n    \n    sensitiveKeys.forEach(key => {\n      const rawData = window.localStorage.getItem(key);\n      if (rawData !== null) {\n        try {\n          // 이미 암호화된 데이터인지 확인\n          const parsed = JSON.parse(rawData);\n          if (parsed.encrypted == null) {\n            // 암호화되지 않은 구 데이터 - 암호화하여 재저장\n            setSecureItem(key, rawData);\n          }\n        } catch {\n          // JSON이 아닌 플레인 텍스트 - 암호화하여 재저장\n          setSecureItem(key, rawData);\n        }\n      }\n    });\n  } catch (error) {\n    // Silently handle migration errors\n  }\n}\n\n/**\n * localStorage 사용량 모니터링\n * @returns 저장소 사용 현황\n */\n\nexport function getStorageInfo(): StorageInfo {\n  try {\n    let totalSize = 0;\n    let itemCount = 0;\n    \n    if (typeof window !== 'undefined' && window.localStorage != null) {\n      for (const key in window.localStorage) {\n        if (window.localStorage.hasOwnProperty(key)) {\n          totalSize += window.localStorage[key].length + key.length;\n          itemCount++;\n        }\n      }\n    }\n\n    return {\n      totalSize: Math.round(totalSize / KIB) + ' KB',\n      itemCount: itemCount,\n      quotaExceeded: totalSize > (MAX_MIB * KIB * KIB) // 5MB 제한\n    };\n  } catch (error) {\n    return {\n      totalSize: 'Unknown',\n      itemCount: 0,\n      quotaExceeded: false\n    };\n  }\n}\n","/**\n * 보안 시스템 마이그레이션 유틸리티\n * XOR 암호화(v1) → AES-256-GCM(v2) 마이그레이션\n */\n\nimport { logger } from './logger';\nimport { secureStorage } from './modernSecureStorage';\nimport { getSecureItem as getLegacyItem } from './secureStorage.legacy';\n\n/**\n * 마이그레이션 결과\n */\nexport interface MigrationResult {\n  success: boolean;\n  migratedKeys: string[];\n  failedKeys: string[];\n  skippedKeys: string[];\n  errors: Array<{ key: string; error: string }>;\n}\n\n/**\n * 마이그레이션 대상 키 목록\n */\nconst SENSITIVE_KEYS = [\n  'CMS_USERS',\n  'CURRENT_USER',\n  'CMS_DISABLE_LOGIN',\n  'CMS_LOGOUT',\n  'constructionApp_stampImage',\n];\n\n/**\n * 데이터가 구버전 암호화 형식인지 확인\n * @param rawData - localStorage에서 가져온 원시 데이터\n * @returns 구버전 여부\n */\nfunction isLegacyEncryption(rawData: string): boolean {\n  try {\n    const parsed = JSON.parse(rawData);\n    // v1: encrypted + checksum 있고, iv 없음\n    // v2: encrypted + iv + algorithm 있음\n    return parsed.encrypted != null && parsed.checksum != null && parsed.iv == null && parsed.algorithm == null;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * 데이터가 이미 신버전 암호화 형식인지 확인\n * @param rawData - localStorage에서 가져온 원시 데이터\n * @returns 신버전 여부\n */\nfunction isModernEncryption(rawData: string): boolean {\n  try {\n    const parsed = JSON.parse(rawData);\n    // v2: encrypted + iv + algorithm 있음\n    return parsed.encrypted != null && parsed.iv != null && parsed.algorithm != null;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * 구버전 암호화 데이터를 신버전으로 마이그레이션\n * @param key - localStorage 키\n * @returns 마이그레이션 성공 여부\n */\nasync function migrateKey(key: string): Promise<boolean> {\n  try {\n    if (typeof window === 'undefined' || window.localStorage == null) {\n      throw new Error('localStorage를 사용할 수 없습니다.');\n    }\n\n    const rawData = window.localStorage.getItem(key);\n    if (rawData === null) {\n      return false; // 데이터 없음 - 스킵\n    }\n\n    // 이미 신버전이면 스킵\n    if (isModernEncryption(rawData)) {\n      logger.log(`[Migration] ${key}: 이미 신버전 암호화 - 스킵`);\n      return true;\n    }\n\n    // 구버전이 아니면 스킵 (평문 또는 다른 형식)\n    if (!isLegacyEncryption(rawData)) {\n      logger.log(`[Migration] ${key}: 구버전 암호화 아님 - 스킵`);\n      return true;\n    }\n\n    logger.log(`[Migration] ${key}: 구버전 감지, 마이그레이션 시작...`);\n\n    // 1. 구버전으로 복호화\n    const decrypted = getLegacyItem(key);\n    if (decrypted === null || decrypted === '') {\n      throw new Error('구버전 복호화 실패');\n    }\n\n    logger.log(`[Migration] ${key}: 구버전 복호화 성공 (${decrypted.length} bytes)`);\n\n    // 2. 신버전으로 암호화\n    await secureStorage.setSecureItem(key, decrypted);\n\n    logger.log(`[Migration] ${key}: 신버전 암호화 및 저장 완료 ✓`);\n\n    return true;\n  } catch (error) {\n    logger.error(`[Migration] ${key} 마이그레이션 실패:`, error);\n    return false;\n  }\n}\n\n/**\n * 모든 민감 데이터를 신버전으로 마이그레이션\n * @param masterPassword - 시스템 마스터 비밀번호\n * @returns 마이그레이션 결과\n */\nexport async function migrateAllSensitiveData(\n  masterPassword: string\n): Promise<MigrationResult> {\n  logger.log('=== 보안 시스템 마이그레이션 시작 ===');\n  logger.log(`대상 키: ${SENSITIVE_KEYS.length}개`);\n\n  // 시스템 키 초기화\n  try {\n    await secureStorage.initializeSystemKey(masterPassword);\n    logger.log('시스템 보안 키 초기화 완료 ✓');\n  } catch (error) {\n    logger.error('시스템 키 초기화 실패:', error);\n    return {\n      success: false,\n      migratedKeys: [],\n      failedKeys: SENSITIVE_KEYS,\n      skippedKeys: [],\n      errors: [{ key: 'SYSTEM', error: String(error) }],\n    };\n  }\n\n  const result: MigrationResult = {\n    success: true,\n    migratedKeys: [],\n    failedKeys: [],\n    skippedKeys: [],\n    errors: [],\n  };\n\n  // 각 키 마이그레이션\n  for (const key of SENSITIVE_KEYS) {\n    try {\n      const migrated = await migrateKey(key);\n\n      if (migrated) {\n        // 데이터가 존재하고 마이그레이션 성공\n        const rawData = window.localStorage.getItem(key);\n        if (rawData !== null && isModernEncryption(rawData)) {\n          result.migratedKeys.push(key);\n        } else {\n          result.skippedKeys.push(key);\n        }\n      } else {\n        // 마이그레이션 실패\n        result.failedKeys.push(key);\n        result.errors.push({ key, error: '마이그레이션 실패' });\n      }\n    } catch (error) {\n      result.failedKeys.push(key);\n      result.errors.push({ key, error: String(error) });\n      result.success = false;\n    }\n  }\n\n  logger.log('=== 마이그레이션 완료 ===');\n  logger.log(`성공: ${result.migratedKeys.length}개`);\n  logger.log(`스킵: ${result.skippedKeys.length}개`);\n  logger.log(`실패: ${result.failedKeys.length}개`);\n\n  return result;\n}\n\n/**\n * 마이그레이션 상태 확인\n * @returns 각 키의 암호화 버전 정보\n */\nexport function checkMigrationStatus(): Record<string, string> {\n  const status: Record<string, string> = {};\n\n  if (typeof window === 'undefined' || window.localStorage == null) {\n    return status;\n  }\n\n  for (const key of SENSITIVE_KEYS) {\n    const rawData = window.localStorage.getItem(key);\n\n    if (rawData === null) {\n      status[key] = '데이터 없음';\n    } else if (isModernEncryption(rawData)) {\n      status[key] = 'v2 (AES-256-GCM) ✓';\n    } else if (isLegacyEncryption(rawData)) {\n      status[key] = 'v1 (XOR) - 마이그레이션 필요 ⚠️';\n    } else {\n      status[key] = '알 수 없는 형식';\n    }\n  }\n\n  return status;\n}\n\n/**\n * 구버전 암호화 시스템 완전 제거 (마이그레이션 후)\n * 주의: 이 함수는 마이그레이션이 완료되고 검증된 후에만 실행해야 합니다.\n */\nexport function removeLegacyEncryptionSystem(): void {\n  logger.warn(\n    '⚠️ 이 작업은 되돌릴 수 없습니다. 마이그레이션이 완료되고 검증된 경우에만 실행하세요.'\n  );\n\n  // 구버전 암호화 관련 코드는 secureStorage.ts에 있으므로\n  // 실제 제거는 수동으로 파일을 삭제하거나 리팩토링해야 합니다.\n  logger.log('구버전 시스템 제거는 secureStorage.ts 파일을 삭제/수정하여 진행하세요.');\n}\n\n/**\n * 마이그레이션 자동 실행 (앱 초기화 시)\n * @param masterPassword - 시스템 마스터 비밀번호\n */\nexport async function autoMigrate(masterPassword: string): Promise<void> {\n  try {\n    // 마이그레이션 상태 확인\n    const status = checkMigrationStatus();\n    const needsMigration = Object.values(status).some((s) => s.includes('v1'));\n\n    if (!needsMigration) {\n      logger.log('✓ 모든 데이터가 이미 최신 암호화 형식입니다.');\n      return;\n    }\n\n    logger.log('⚠️ 구버전 암호화 감지 - 자동 마이그레이션 시작');\n\n    // 마이그레이션 실행\n    const result = await migrateAllSensitiveData(masterPassword);\n\n    if (result.success && result.failedKeys.length === 0) {\n      logger.log('✓ 자동 마이그레이션 완료');\n    } else {\n      logger.error('⚠️ 마이그레이션 중 일부 오류 발생:', result);\n    }\n  } catch (error) {\n    logger.error('자동 마이그레이션 실패:', error);\n  }\n}\n"],"names":["ENCRYPTION_KEY","SHIFT_5","MASK_32","RADIX_36","generateChecksum","data","checksum","i","length","charCodeAt","toString","isSensitiveData","key","some","sensitiveKey","includes","getSecureItem","window","localStorage","rawData","getItem","parsedData","JSON","parse","encrypted","decrypted","encryptedText","decoded","atob","result","String","fromCharCode","error","xorDecrypt","parseError","SENSITIVE_KEYS","isLegacyEncryption","parsed","iv","algorithm","_unused","isModernEncryption","_unused2","async","migrateKey","Error","logger","log","concat","getLegacyItem","secureStorage","setSecureItem","autoMigrate","masterPassword","status","checkMigrationStatus","Object","values","s","initializeSystemKey","success","migratedKeys","failedKeys","skippedKeys","errors","push","migrateAllSensitiveData"],"sourceRoot":""}
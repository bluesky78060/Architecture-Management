{"version":3,"file":"static/js/703.8b410364.chunk.js","mappings":"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","sources":["services/fileUploadService.ts","components/schedules/ScheduleList.tsx","components/schedules/ScheduleCalendar.tsx","components/schedules/ScheduleWeekView.tsx","components/schedules/ScheduleDayView.tsx","utils/scheduleRecurrence.ts","utils/scheduleConflict.ts","components/schedules/ScheduleForm.tsx","components/schedules/ScheduleFilters.tsx","services/googleCalendarService.ts","components/schedules/GoogleCalendarSync.tsx","components/schedules/Schedules.tsx"],"sourcesContent":["/* eslint-disable */\nimport { supabase } from './supabase';\n\nconst STORAGE_BUCKET = 'schedule-attachments';\nconst MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB\n\n/**\n * 파일 업로드 서비스\n */\nexport interface UploadResult {\n  success: boolean;\n  url?: string;\n  path?: string;\n  error?: string;\n}\n\n/**\n * 파일을 Supabase Storage에 업로드합니다.\n * @param file 업로드할 파일\n * @param userId 사용자 ID\n * @param scheduleId 일정 ID\n * @returns 업로드 결과\n */\nexport async function uploadFile(\n  file: File,\n  userId: string,\n  scheduleId: number\n): Promise<UploadResult> {\n  try {\n    // 파일 크기 체크\n    if (file.size > MAX_FILE_SIZE) {\n      return {\n        success: false,\n        error: '파일 크기는 10MB를 초과할 수 없습니다.',\n      };\n    }\n\n    // 파일 확장자 추출\n    const fileExt = file.name.split('.').pop();\n    const fileName = `${Date.now()}-${Math.random().toString(36).substring(7)}.${fileExt}`;\n    const filePath = `${userId}/${scheduleId}/${fileName}`;\n\n    // Supabase Storage에 업로드\n    if (!supabase) {\n      return {\n        success: false,\n        error: '데이터베이스 연결 오류',\n      };\n    }\n\n    const { error } = await supabase.storage\n      .from(STORAGE_BUCKET)\n      .upload(filePath, file, {\n        cacheControl: '3600',\n        upsert: false,\n      });\n\n    if (error) {\n      console.error('❌ File upload error:', error);\n      return {\n        success: false,\n        error: error.message,\n      };\n    }\n\n    // Public URL 가져오기\n    const { data: { publicUrl } } = supabase.storage\n      .from(STORAGE_BUCKET)\n      .getPublicUrl(filePath);\n\n    return {\n      success: true,\n      url: publicUrl,\n      path: filePath,\n    };\n  } catch (error: any) {\n    console.error('❌ Unexpected file upload error:', error);\n    return {\n      success: false,\n      error: error.message || '파일 업로드 중 오류가 발생했습니다.',\n    };\n  }\n}\n\n/**\n * Supabase Storage에서 파일을 삭제합니다.\n * @param filePath 파일 경로\n * @returns 삭제 성공 여부\n */\nexport async function deleteFile(filePath: string): Promise<boolean> {\n  try {\n    if (!supabase) {\n      console.error('❌ Supabase not initialized');\n      return false;\n    }\n\n    const { error } = await supabase.storage\n      .from(STORAGE_BUCKET)\n      .remove([filePath]);\n\n    if (error) {\n      console.error('❌ File delete error:', error);\n      return false;\n    }\n\n    return true;\n  } catch (error) {\n    console.error('❌ Unexpected file delete error:', error);\n    return false;\n  }\n}\n\n/**\n * 파일명에서 확장자를 제외한 원본 이름을 추출합니다.\n * @param fileName 파일명\n * @returns 원본 파일명\n */\nexport function getOriginalFileName(fileName: string): string {\n  // timestamp와 random string 제거\n  const parts = fileName.split('-');\n  if (parts.length >= 2) {\n    return parts.slice(1).join('-');\n  }\n  return fileName;\n}\n\n/**\n * 파일 크기를 사람이 읽기 쉬운 형식으로 변환합니다.\n * @param bytes 바이트 크기\n * @returns 포맷된 문자열\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n\n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n\n  return Math.round(bytes / Math.pow(k, i) * 100) / 100 + ' ' + sizes[i];\n}\n\n/**\n * 파일 타입에 따른 아이콘을 반환합니다.\n * @param fileName 파일명\n * @returns 아이콘 문자열\n */\nexport function getFileIcon(fileName: string): string {\n  const ext = fileName.split('.').pop()?.toLowerCase();\n\n  const iconMap: Record<string, string> = {\n    // 이미지\n    jpg: '🖼️',\n    jpeg: '🖼️',\n    png: '🖼️',\n    gif: '🖼️',\n    // 문서\n    pdf: '📄',\n    doc: '📝',\n    docx: '📝',\n    xls: '📊',\n    xlsx: '📊',\n    ppt: '📊',\n    pptx: '📊',\n    // 압축\n    zip: '📦',\n    rar: '📦',\n    // 기타\n    txt: '📃',\n  };\n\n  return iconMap[ext || ''] || '📎';\n}\n","import { compiledBlock as _compiledBlock } from \"million/react\";\nconst ScheduleList_1 = _compiledBlock(() => <div className=\"bg-white dark:bg-gray-800 rounded-lg p-8 text-center\">\n        <p className=\"text-gray-500 dark:text-gray-400\">등록된 일정이 없습니다.</p>\n        <p className=\"text-sm text-gray-400 dark:text-gray-500 mt-2\">\n          상단의 &quot;+ 일정 추가&quot; 버튼을 눌러 일정을 등록하세요.\n        </p>\n      </div>, {\n  name: \"ScheduleList_1\"\n});\nconst ScheduleList_2 = _compiledBlock(() => <div className=\"text-center py-12\">\n        <p className=\"text-gray-500 dark:text-gray-400 text-lg\">등록된 일정이 없습니다.</p>\n        <p className=\"text-gray-400 dark:text-gray-500 text-sm mt-2\">상단의 \"일정 추가\" 버튼을 클릭해서 새 일정을 만들어보세요.</p>\n      </div>, {\n  name: \"ScheduleList_2\"\n});\nconst ScheduleList_3 = _compiledBlock(_props3 => <div className=\"space-y-4\">\n      {_props3.v0}\n    </div>, {\n  name: \"ScheduleList_3\",\n  portals: [\"v0\"]\n});\nconst ScheduleList = function ScheduleList({\n  schedules,\n  onEdit\n}: Props) {\n  const {\n    deleteSchedule,\n    saveSchedule\n  } = useApp();\n\n  /* eslint-disable no-console */\n  console.log('📅 [ScheduleList] Schedules data:', schedules);\n  /* eslint-enable no-console */\n\n  const getTypeBadge = (type: string) => {\n    const styles = {\n      construction: 'bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-400',\n      consultation: 'bg-indigo-100 dark:bg-indigo-900/30 text-indigo-800 dark:text-indigo-400',\n      meeting: 'bg-pink-100 dark:bg-pink-900/30 text-pink-800 dark:text-pink-400',\n      other: 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-400'\n    };\n    const labels = {\n      construction: '공사',\n      consultation: '상담',\n      meeting: '회의',\n      other: '기타'\n    };\n    return <span className={`px-2 py-1 text-xs rounded-full ${styles[type as keyof typeof styles]}`}>\n        {labels[type as keyof typeof labels]}\n      </span>;\n  };\n  const handleDelete = (id: number) => {\n    if (window.confirm('일정을 삭제하시겠습니까?')) {\n      deleteSchedule(id);\n    }\n  };\n  const handleStatusChange = async (schedule: Schedule, newStatus: string) => {\n    const updatedSchedule = {\n      ...schedule,\n      status: newStatus as Schedule['status'],\n      updatedAt: new Date().toISOString()\n    };\n    await saveSchedule(updatedSchedule);\n  };\n  if (!schedules || schedules.length === 0) {\n    return /*@million jsx-skip*/<ScheduleList_1 />;\n  }\n\n  // 빈 상태 표시\n  if (schedules.length === 0) {\n    return /*@million jsx-skip*/<ScheduleList_2 />;\n  }\n  return /*@million jsx-skip*/<ScheduleList_3 v0={schedules.map((schedule: Schedule) => <div key={schedule.id} className=\"bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm hover:shadow-md transition-shadow\">\n          <div className=\"flex justify-between items-start\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                {getTypeBadge(schedule.scheduleType)}\n\n                {/* 상태 변경 드롭다운 */}\n                <select value={schedule.status} onChange={e => handleStatusChange(schedule, e.target.value)} onClick={e => e.stopPropagation()} className={`px-2 py-1 text-xs rounded-full border-0 cursor-pointer ${schedule.status === 'scheduled' ? 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-400' : schedule.status === 'in_progress' ? 'bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-400' : schedule.status === 'completed' ? 'bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-400' : 'bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-400'}`}>\n                  <option value=\"scheduled\">📅 예정</option>\n                  <option value=\"in_progress\">⏳ 진행중</option>\n                  <option value=\"completed\">✅ 완료</option>\n                  <option value=\"cancelled\">❌ 취소</option>\n                </select>\n              </div>\n\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-1\">\n                {schedule.title}\n              </h3>\n\n              {schedule.description && <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-2\">\n                  {schedule.description}\n                </p>}\n\n              <div className=\"flex flex-wrap gap-4 text-sm text-gray-500 dark:text-gray-400\">\n                <div className=\"flex items-center gap-1\">\n                  <span>📅</span>\n                  <span>{schedule.startDate}</span>\n                  {schedule.startTime && <span>{schedule.startTime}</span>}\n                </div>\n\n                {schedule.clientName && <div className=\"flex items-center gap-1\">\n                    <span>👤</span>\n                    <span>{schedule.clientName}</span>\n                  </div>}\n\n                {schedule.location && <div className=\"flex items-center gap-1\">\n                    <span>📍</span>\n                    <span>{schedule.location}</span>\n                  </div>}\n              </div>\n\n              {/* Attachments */}\n              {schedule.attachments && schedule.attachments.length > 0 && <div className=\"mt-3 pt-3 border-t border-gray-200 dark:border-gray-700\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      📎 첨부파일 ({schedule.attachments.length})\n                    </span>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {schedule.attachments.map((attachment, index) => <a key={index} href={attachment.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"inline-flex items-center gap-1 px-2 py-1 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded text-sm text-gray-700 dark:text-gray-300 transition-colors\">\n                        <span>{getFileIcon(attachment.name)}</span>\n                        <span className=\"max-w-[200px] truncate\">{attachment.name}</span>\n                      </a>)}\n                  </div>\n                </div>}\n            </div>\n\n            <div className=\"flex gap-2 ml-4\">\n              <button onClick={() => onEdit(schedule)} className=\"px-3 py-1 text-sm text-blue-600 dark:text-blue-400 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded\">\n                편집\n              </button>\n              <button onClick={() => handleDelete(schedule.id)} className=\"px-3 py-1 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded\">\n                삭제\n              </button>\n            </div>\n          </div>\n        </div>)} />;\n};\nimport { block as _block } from \"million/react\";\n/* eslint-disable */\nimport { useApp } from '../../contexts/AppContext';\nimport type { Schedule } from '../../types/domain';\nimport { getFileIcon } from '../../services/fileUploadService';\ninterface Props {\n  schedules: Schedule[];\n  onEdit: (schedule: Schedule) => void;\n}\nexport default ScheduleList;","import { compiledBlock as _compiledBlock } from \"million/react\";\nconst ScheduleCalendar_1 = _compiledBlock(_props => <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\n      {/* 캘린더 헤더 */}\n      <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n            {_props.v0}\n          </h2>\n          <div className=\"flex items-center gap-2\">\n            <button onClick={_props.v1} className=\"px-3 py-1 text-sm bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-200 dark:hover:bg-gray-600\">\n              오늘\n            </button>\n            <button onClick={_props.v2} className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded\">\n              <svg className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n              </svg>\n            </button>\n            <button onClick={_props.v3} className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded\">\n              <svg className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* 요일 헤더 */}\n      <div className=\"grid grid-cols-7 bg-gray-50 dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700\">\n        {_props.v4}\n      </div>\n\n      {/* 날짜 그리드 */}\n      <div className=\"grid grid-cols-7\">\n        {_props.v5}\n      </div>\n    </div>, {\n  name: \"ScheduleCalendar_1\",\n  portals: [\"v0\", \"v4\", \"v5\"]\n});\nconst ScheduleCalendar = function ScheduleCalendar({\n  schedules,\n  currentDate,\n  onDateChange,\n  onScheduleClick,\n  onDateClick\n}: ScheduleCalendarProps) {\n  // 달력 헬퍼 함수들\n  const getDaysInMonth = (date: Date): number => {\n    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();\n  };\n  const getFirstDayOfMonth = (date: Date): number => {\n    return new Date(date.getFullYear(), date.getMonth(), 1).getDay();\n  };\n  const getMonthYear = (date: Date): string => {\n    return `${date.getFullYear()}년 ${date.getMonth() + 1}월`;\n  };\n  const navigatePrevMonth = () => {\n    const newDate = new Date(currentDate);\n    newDate.setMonth(newDate.getMonth() - 1);\n    onDateChange(newDate);\n  };\n  const navigateNextMonth = () => {\n    const newDate = new Date(currentDate);\n    newDate.setMonth(newDate.getMonth() + 1);\n    onDateChange(newDate);\n  };\n  const navigateToday = () => {\n    onDateChange(new Date());\n  };\n\n  // 현재 월의 날짜 그리드 생성\n  const calendarDays = useMemo(() => {\n    const daysInMonth = getDaysInMonth(currentDate);\n    const firstDay = getFirstDayOfMonth(currentDate);\n    const days: Array<{\n      date: number | null;\n      fullDate: Date | null;\n    }> = [];\n\n    // 이전 달의 빈 칸\n    for (let i = 0; i < firstDay; i++) {\n      days.push({\n        date: null,\n        fullDate: null\n      });\n    }\n\n    // 현재 달의 날짜\n    for (let i = 1; i <= daysInMonth; i++) {\n      const fullDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), i);\n      days.push({\n        date: i,\n        fullDate\n      });\n    }\n    return days;\n  }, [currentDate]);\n\n  // 특정 날짜의 일정들 가져오기\n  const getSchedulesForDate = (date: Date): Schedule[] => {\n    if (!date) return [];\n    const dateString = date.toISOString().split('T')[0];\n    return schedules.filter(schedule => schedule.startDate === dateString);\n  };\n\n  // 오늘 날짜인지 확인\n  const isToday = (date: Date | null): boolean => {\n    if (!date) return false;\n    const today = new Date();\n    return date.getFullYear() === today.getFullYear() && date.getMonth() === today.getMonth() && date.getDate() === today.getDate();\n  };\n\n  // 우선순위별 색상\n  const getPriorityColor = (priority: string): string => {\n    switch (priority) {\n      case 'urgent':\n        return 'bg-red-500 dark:bg-red-600';\n      case 'high':\n        return 'bg-orange-500 dark:bg-orange-600';\n      case 'normal':\n        return 'bg-blue-500 dark:bg-blue-600';\n      case 'low':\n        return 'bg-gray-400 dark:bg-gray-600';\n      default:\n        return 'bg-blue-500 dark:bg-blue-600';\n    }\n  };\n  return /*@million jsx-skip*/<ScheduleCalendar_1 v0={getMonthYear(currentDate)} v1={navigateToday} v2={navigatePrevMonth} v3={navigateNextMonth} v4={['일', '월', '화', '수', '목', '금', '토'].map((day, index) => <div key={day} className={`p-2 text-center text-sm font-semibold ${index === 0 ? 'text-red-600 dark:text-red-400' : index === 6 ? 'text-blue-600 dark:text-blue-400' : 'text-gray-700 dark:text-gray-300'}`}>\n            {day}\n          </div>)} v5={calendarDays.map((day, index) => {\n    const daySchedules = day.fullDate ? getSchedulesForDate(day.fullDate) : [];\n    const isTodayDate = isToday(day.fullDate);\n    return <div key={index} onClick={() => day.fullDate && onDateClick(day.fullDate)} className={`min-h-[100px] p-2 border-b border-r border-gray-200 dark:border-gray-700 ${day.date ? 'cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700' : 'bg-gray-50 dark:bg-gray-900'}`}>\n              {day.date && <>\n                  <div className={`text-sm font-medium mb-1 ${isTodayDate ? 'inline-flex items-center justify-center w-6 h-6 bg-blue-600 text-white rounded-full' : index % 7 === 0 ? 'text-red-600 dark:text-red-400' : index % 7 === 6 ? 'text-blue-600 dark:text-blue-400' : 'text-gray-900 dark:text-gray-100'}`}>\n                    {day.date}\n                  </div>\n\n                  {/* 일정 표시 (최대 3개) */}\n                  <div className=\"space-y-1\">\n                    {daySchedules.slice(0, 3).map(schedule => <div key={schedule.id} onClick={e => {\n            e.stopPropagation();\n            onScheduleClick(schedule);\n          }} className={`text-xs px-1 py-0.5 rounded truncate text-white ${getPriorityColor(schedule.priority)}`} title={schedule.title}>\n                        {schedule.startTime && `${schedule.startTime} `}\n                        {schedule.title}\n                      </div>)}\n                    {daySchedules.length > 3 && <div className=\"text-xs text-gray-500 dark:text-gray-400 px-1\">\n                        +{daySchedules.length - 3}개 더\n                      </div>}\n                  </div>\n                </>}\n            </div>;\n  })} />;\n};\nimport { block as _block } from \"million/react\";\n/* eslint-disable */\nimport { useMemo } from 'react';\nimport type { Schedule } from '../../types/domain';\ninterface ScheduleCalendarProps {\n  schedules: Schedule[];\n  currentDate: Date;\n  onDateChange: (date: Date) => void;\n  onScheduleClick: (schedule: Schedule) => void;\n  onDateClick: (date: Date) => void;\n}\nexport default ScheduleCalendar;","import { compiledBlock as _compiledBlock } from \"million/react\";\nconst ScheduleWeekView_1 = _compiledBlock(_props => <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\n      {/* 헤더 */}\n      <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n            {_props.v0}\n          </h2>\n          <div className=\"flex items-center gap-2\">\n            <button onClick={_props.v1} className=\"px-3 py-1 text-sm bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-200 dark:hover:bg-gray-600\">\n              오늘\n            </button>\n            <button onClick={_props.v2} className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded\">\n              <svg className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n              </svg>\n            </button>\n            <button onClick={_props.v3} className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded\">\n              <svg className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* 주간 그리드 */}\n      <div className=\"overflow-x-auto\">\n        <div className=\"inline-block min-w-full\">\n          {/* 요일 헤더 */}\n          <div className=\"grid grid-cols-8 border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"p-2 text-center text-sm font-semibold text-gray-700 dark:text-gray-300 bg-gray-50 dark:bg-gray-900\">\n              시간\n            </div>\n            {_props.v4}\n          </div>\n\n          {/* 시간대별 그리드 */}\n          <div>\n            {_props.v5}\n          </div>\n        </div>\n      </div>\n    </div>, {\n  name: \"ScheduleWeekView_1\",\n  portals: [\"v0\", \"v4\", \"v5\"]\n});\nconst ScheduleWeekView = function ScheduleWeekView({\n  schedules,\n  currentDate,\n  onDateChange,\n  onScheduleClick\n}: ScheduleWeekViewProps) {\n  // 주간 헬퍼 함수들\n  const getWeekDates = (date: Date): Date[] => {\n    const d = new Date(date);\n    const day = d.getDay();\n    const diff = d.getDate() - day; // 일요일로 이동\n    const sunday = new Date(d.setDate(diff));\n    const weekDates: Date[] = [];\n    for (let i = 0; i < 7; i++) {\n      const weekDate = new Date(sunday);\n      weekDate.setDate(sunday.getDate() + i);\n      weekDates.push(weekDate);\n    }\n    return weekDates;\n  };\n  const getWeekRange = (date: Date): string => {\n    const weekDates = getWeekDates(date);\n    const start = weekDates[0];\n    const end = weekDates[6];\n    const startMonth = start.getMonth() + 1;\n    const endMonth = end.getMonth() + 1;\n    if (startMonth === endMonth) {\n      return `${start.getFullYear()}년 ${startMonth}월 ${start.getDate()}일 - ${end.getDate()}일`;\n    } else {\n      return `${start.getFullYear()}년 ${startMonth}월 ${start.getDate()}일 - ${endMonth}월 ${end.getDate()}일`;\n    }\n  };\n  const navigatePrevWeek = () => {\n    const newDate = new Date(currentDate);\n    newDate.setDate(newDate.getDate() - 7);\n    onDateChange(newDate);\n  };\n  const navigateNextWeek = () => {\n    const newDate = new Date(currentDate);\n    newDate.setDate(newDate.getDate() + 7);\n    onDateChange(newDate);\n  };\n  const navigateToday = () => {\n    onDateChange(new Date());\n  };\n  const weekDates = useMemo(() => getWeekDates(currentDate), [currentDate]);\n\n  // 시간대 (6시~22시)\n  const hours = useMemo(() => {\n    const result: number[] = [];\n    for (let i = 6; i <= 22; i++) {\n      result.push(i);\n    }\n    return result;\n  }, []);\n\n  // 특정 날짜의 일정들 가져오기\n  const getSchedulesForDate = (date: Date): Schedule[] => {\n    const dateString = date.toISOString().split('T')[0];\n    return schedules.filter(schedule => schedule.startDate === dateString);\n  };\n\n  // 특정 날짜, 시간대의 일정들 가져오기\n  const getSchedulesForDateTime = (date: Date, hour: number): Schedule[] => {\n    const dateSchedules = getSchedulesForDate(date);\n    return dateSchedules.filter(schedule => {\n      if (schedule.allDay) return hour === 6; // 종일 일정은 첫 시간대에만 표시\n\n      if (schedule.startTime) {\n        const scheduleHour = parseInt(schedule.startTime.split(':')[0]);\n        return scheduleHour === hour;\n      }\n      return hour === 6; // 시간 미지정은 첫 시간대에 표시\n    });\n  };\n\n  // 오늘 날짜인지 확인\n  const isToday = (date: Date): boolean => {\n    const today = new Date();\n    return date.getFullYear() === today.getFullYear() && date.getMonth() === today.getMonth() && date.getDate() === today.getDate();\n  };\n\n  // 우선순위별 색상\n  const getPriorityColor = (priority: string): string => {\n    switch (priority) {\n      case 'urgent':\n        return 'bg-red-500 dark:bg-red-600';\n      case 'high':\n        return 'bg-orange-500 dark:bg-orange-600';\n      case 'normal':\n        return 'bg-blue-500 dark:bg-blue-600';\n      case 'low':\n        return 'bg-gray-400 dark:bg-gray-600';\n      default:\n        return 'bg-blue-500 dark:bg-blue-600';\n    }\n  };\n  return /*@million jsx-skip*/<ScheduleWeekView_1 v0={getWeekRange(currentDate)} v1={navigateToday} v2={navigatePrevWeek} v3={navigateNextWeek} v4={weekDates.map((date, index) => {\n    const dayNames = ['일', '월', '화', '수', '목', '금', '토'];\n    const isTodayDate = isToday(date);\n    return <div key={index} className={`p-2 text-center border-l border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900 ${index === 0 ? 'text-red-600 dark:text-red-400' : index === 6 ? 'text-blue-600 dark:text-blue-400' : 'text-gray-700 dark:text-gray-300'}`}>\n                  <div className=\"text-xs font-semibold\">{dayNames[index]}</div>\n                  <div className={`text-sm ${isTodayDate ? 'inline-flex items-center justify-center w-6 h-6 bg-blue-600 text-white rounded-full' : ''}`}>\n                    {date.getDate()}\n                  </div>\n                </div>;\n  })} v5={hours.map(hour => <div key={hour} className=\"grid grid-cols-8 border-b border-gray-200 dark:border-gray-700 min-h-[60px]\">\n                {/* 시간 */}\n                <div className=\"p-2 text-center text-xs text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-900\">\n                  {hour}:00\n                </div>\n\n                {/* 각 요일 */}\n                {weekDates.map((date, dayIndex) => {\n      const daySchedules = getSchedulesForDateTime(date, hour);\n      return <div key={dayIndex} className=\"p-1 border-l border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700\">\n                      <div className=\"space-y-1\">\n                        {daySchedules.map(schedule => <div key={schedule.id} onClick={() => onScheduleClick(schedule)} className={`text-xs px-1 py-0.5 rounded cursor-pointer text-white ${getPriorityColor(schedule.priority)}`} title={schedule.title}>\n                            <div className=\"truncate font-medium\">\n                              {schedule.startTime && !schedule.allDay && `${schedule.startTime} `}\n                              {schedule.title}\n                            </div>\n                            {schedule.location && <div className=\"truncate text-white text-opacity-80 text-[10px]\">\n                                📍 {schedule.location}\n                              </div>}\n                          </div>)}\n                      </div>\n                    </div>;\n    })}\n              </div>)} />;\n};\nimport { block as _block } from \"million/react\";\n/* eslint-disable */\nimport { useMemo } from 'react';\nimport type { Schedule } from '../../types/domain';\ninterface ScheduleWeekViewProps {\n  schedules: Schedule[];\n  currentDate: Date;\n  onDateChange: (date: Date) => void;\n  onScheduleClick: (schedule: Schedule) => void;\n}\nexport default ScheduleWeekView;","import { compiledBlock as _compiledBlock } from \"million/react\";\nconst ScheduleDayView_1 = _compiledBlock(_props => <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\n      {/* 헤더 */}\n      <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <h2 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n            {_props.v0}\n            {_props.v1}\n          </h2>\n          <div className=\"flex items-center gap-2\">\n            <button onClick={_props.v2} className=\"px-3 py-1 text-sm bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-200 dark:hover:bg-gray-600\">\n              오늘\n            </button>\n            <button onClick={_props.v3} className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded\">\n              <svg className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n              </svg>\n            </button>\n            <button onClick={_props.v4} className=\"p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded\">\n              <svg className=\"w-5 h-5 text-gray-600 dark:text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n\n        {/* 일정 요약 */}\n        <div className=\"mt-3 flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400\">\n          <div>전체 일정: <span className=\"font-medium text-gray-900 dark:text-white\">{_props.v5}개</span></div>\n          <div>완료: <span className=\"font-medium text-green-600 dark:text-green-400\">{_props.v6}개</span></div>\n          <div>진행중: <span className=\"font-medium text-blue-600 dark:text-blue-400\">{_props.v7}개</span></div>\n        </div>\n      </div>\n\n      {/* 시간대별 그리드 */}\n      <div className=\"overflow-y-auto max-h-[600px]\">\n        {_props.v8}\n      </div>\n\n      {/* 일정이 없는 경우 */}\n      {_props.v9}\n    </div>, {\n  name: \"ScheduleDayView_1\",\n  portals: [\"v0\", \"v1\", \"v5\", \"v6\", \"v7\", \"v8\", \"v9\"]\n});\nconst ScheduleDayView = function ScheduleDayView({\n  schedules,\n  currentDate,\n  onDateChange,\n  onScheduleClick\n}: ScheduleDayViewProps) {\n  // 일간 헬퍼 함수들\n  const getDateString = (date: Date): string => {\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    const dayNames = ['일요일', '월요일', '화요일', '수요일', '목요일', '금요일', '토요일'];\n    const dayName = dayNames[date.getDay()];\n    return `${year}년 ${month}월 ${day}일 ${dayName}`;\n  };\n  const navigatePrevDay = () => {\n    const newDate = new Date(currentDate);\n    newDate.setDate(newDate.getDate() - 1);\n    onDateChange(newDate);\n  };\n  const navigateNextDay = () => {\n    const newDate = new Date(currentDate);\n    newDate.setDate(newDate.getDate() + 1);\n    onDateChange(newDate);\n  };\n  const navigateToday = () => {\n    onDateChange(new Date());\n  };\n\n  // 시간대 (6시~22시)\n  const hours = useMemo(() => {\n    const result: number[] = [];\n    for (let i = 6; i <= 22; i++) {\n      result.push(i);\n    }\n    return result;\n  }, []);\n\n  // 오늘 날짜의 일정들\n  const daySchedules = useMemo(() => {\n    const dateString = currentDate.toISOString().split('T')[0];\n    return schedules.filter(schedule => schedule.startDate === dateString);\n  }, [schedules, currentDate]);\n\n  // 특정 시간대의 일정들 가져오기\n  const getSchedulesForHour = (hour: number): Schedule[] => {\n    return daySchedules.filter(schedule => {\n      if (schedule.allDay) return hour === 6; // 종일 일정은 첫 시간대에만 표시\n\n      if (schedule.startTime) {\n        const scheduleHour = parseInt(schedule.startTime.split(':')[0]);\n        return scheduleHour === hour;\n      }\n      return hour === 6; // 시간 미지정은 첫 시간대에 표시\n    });\n  };\n\n  // 오늘 날짜인지 확인\n  const isToday = (): boolean => {\n    const today = new Date();\n    return currentDate.getFullYear() === today.getFullYear() && currentDate.getMonth() === today.getMonth() && currentDate.getDate() === today.getDate();\n  };\n\n  // 우선순위별 색상\n  const getPriorityColor = (priority: string): string => {\n    switch (priority) {\n      case 'urgent':\n        return 'bg-red-500 dark:bg-red-600';\n      case 'high':\n        return 'bg-orange-500 dark:bg-orange-600';\n      case 'normal':\n        return 'bg-blue-500 dark:bg-blue-600';\n      case 'low':\n        return 'bg-gray-400 dark:bg-gray-600';\n      default:\n        return 'bg-blue-500 dark:bg-blue-600';\n    }\n  };\n\n  // 상태별 아이콘\n  const getStatusIcon = (status: string): string => {\n    switch (status) {\n      case 'scheduled':\n        return '📅';\n      case 'in_progress':\n        return '⏳';\n      case 'completed':\n        return '✅';\n      case 'cancelled':\n        return '❌';\n      default:\n        return '📅';\n    }\n  };\n  return /*@million jsx-skip*/<ScheduleDayView_1 v0={getDateString(currentDate)} v1={isToday() && <span className=\"ml-2 px-2 py-1 text-xs bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 rounded\">\n                오늘\n              </span>} v2={navigateToday} v3={navigatePrevDay} v4={navigateNextDay} v5={daySchedules.length} v6={daySchedules.filter(s => s.status === 'completed').length} v7={daySchedules.filter(s => s.status === 'in_progress').length} v8={hours.map(hour => {\n    const hourSchedules = getSchedulesForHour(hour);\n    return <div key={hour} className=\"flex border-b border-gray-200 dark:border-gray-700 min-h-[80px]\">\n              {/* 시간 */}\n              <div className=\"w-20 flex-shrink-0 p-3 text-center text-sm text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-900\">\n                <div className=\"font-medium\">{hour}:00</div>\n              </div>\n\n              {/* 일정 영역 */}\n              <div className=\"flex-1 p-2 hover:bg-gray-50 dark:hover:bg-gray-700\">\n                {hourSchedules.length === 0 ? <div className=\"h-full flex items-center justify-center text-xs text-gray-400 dark:text-gray-600\">\n                    일정 없음\n                  </div> : <div className=\"space-y-2\">\n                    {hourSchedules.map(schedule => <div key={schedule.id} onClick={() => onScheduleClick(schedule)} className={`p-3 rounded-lg cursor-pointer shadow-sm hover:shadow-md transition-shadow text-white ${getPriorityColor(schedule.priority)}`}>\n                        {/* 일정 헤더 */}\n                        <div className=\"flex items-start justify-between mb-2\">\n                          <div className=\"flex-1\">\n                            <div className=\"font-medium text-base\">\n                              {getStatusIcon(schedule.status)} {schedule.title}\n                            </div>\n                            {schedule.startTime && !schedule.allDay && <div className=\"text-xs mt-1 text-white text-opacity-90\">\n                                ⏰ {schedule.startTime}\n                                {schedule.endTime && ` - ${schedule.endTime}`}\n                              </div>}\n                            {schedule.allDay && <div className=\"text-xs mt-1 text-white text-opacity-90\">\n                                📅 종일\n                              </div>}\n                          </div>\n                        </div>\n\n                        {/* 일정 상세 */}\n                        <div className=\"space-y-1 text-xs text-white text-opacity-90\">\n                          {schedule.clientName && <div>👤 {schedule.clientName}</div>}\n                          {schedule.location && <div>📍 {schedule.location}</div>}\n                          {schedule.projectName && <div>🏗️ {schedule.projectName}</div>}\n                          {schedule.description && <div className=\"mt-2 text-white text-opacity-80\">\n                              {schedule.description}\n                            </div>}\n                        </div>\n                      </div>)}\n                  </div>}\n              </div>\n            </div>;\n  })} v9={daySchedules.length === 0 && <div className=\"p-8 text-center\">\n          <div className=\"text-4xl mb-2\">📅</div>\n          <div className=\"text-gray-500 dark:text-gray-400\">\n            이 날짜에 예정된 일정이 없습니다\n          </div>\n        </div>} />;\n};\nimport { block as _block } from \"million/react\";\n/* eslint-disable */\nimport { useMemo } from 'react';\nimport type { Schedule } from '../../types/domain';\ninterface ScheduleDayViewProps {\n  schedules: Schedule[];\n  currentDate: Date;\n  onDateChange: (date: Date) => void;\n  onScheduleClick: (schedule: Schedule) => void;\n}\nexport default ScheduleDayView;","/* eslint-disable */\nimport type { Schedule } from '../types/domain';\n\n/**\n * 반복 일정을 주어진 기간 내의 개별 일정 인스턴스로 확장합니다.\n * @param schedule 반복 일정 객체\n * @param startDate 확장할 기간의 시작일 (YYYY-MM-DD)\n * @param endDate 확장할 기간의 종료일 (YYYY-MM-DD)\n * @returns 확장된 일정 인스턴스 배열\n */\nexport function expandRecurringSchedule(\n  schedule: Schedule,\n  startDate: string,\n  endDate: string\n): Schedule[] {\n  if (!schedule.isRecurring || !schedule.recurrenceRule) {\n    return [schedule];\n  }\n\n  const instances: Schedule[] = [];\n  const { frequency, interval, endDate: recurrenceEndDate, daysOfWeek } = schedule.recurrenceRule;\n\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const scheduleStart = new Date(schedule.startDate);\n  const recurrenceEnd = recurrenceEndDate ? new Date(recurrenceEndDate) : end;\n\n  let currentDate = new Date(scheduleStart);\n\n  // 반복 종료일이 조회 기간보다 이전이면 반복 종료일까지만\n  const effectiveEnd = recurrenceEnd < end ? recurrenceEnd : end;\n\n  while (currentDate <= effectiveEnd) {\n    // 조회 기간 시작일 이후이고, 반복 규칙에 맞는 경우만 추가\n    if (currentDate >= start) {\n      // 주간 반복인 경우 요일 체크\n      if (frequency === 'weekly' && daysOfWeek && daysOfWeek.length > 0) {\n        const dayOfWeek = currentDate.getDay();\n        if (!daysOfWeek.includes(dayOfWeek)) {\n          // 다음 반복일로 이동\n          addInterval(currentDate, frequency, interval);\n          continue;\n        }\n      }\n\n      // 인스턴스 생성\n      const instance: Schedule = {\n        ...schedule,\n        id: schedule.id, // 원본 ID 유지 (반복 일정 시리즈 식별용)\n        startDate: formatDate(currentDate),\n        endDate: schedule.endDate ? formatDate(\n          new Date(new Date(currentDate).getTime() +\n            (new Date(schedule.endDate).getTime() - new Date(schedule.startDate).getTime()))\n        ) : undefined,\n      };\n      instances.push(instance);\n    }\n\n    // 다음 반복일로 이동\n    addInterval(currentDate, frequency, interval);\n  }\n\n  return instances;\n}\n\n/**\n * 날짜에 반복 간격을 추가합니다.\n */\nfunction addInterval(\n  date: Date,\n  frequency: 'daily' | 'weekly' | 'monthly' | 'yearly',\n  interval: number\n): void {\n  switch (frequency) {\n    case 'daily':\n      date.setDate(date.getDate() + interval);\n      break;\n    case 'weekly':\n      date.setDate(date.getDate() + interval * 7);\n      break;\n    case 'monthly':\n      date.setMonth(date.getMonth() + interval);\n      break;\n    case 'yearly':\n      date.setFullYear(date.getFullYear() + interval);\n      break;\n  }\n}\n\n/**\n * Date 객체를 YYYY-MM-DD 형식으로 변환합니다.\n */\nfunction formatDate(date: Date): string {\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0');\n  const day = String(date.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\n/**\n * 주어진 날짜 범위 내의 모든 일정(반복 일정 포함)을 확장합니다.\n */\nexport function expandSchedulesForDateRange(\n  schedules: Schedule[],\n  startDate: string,\n  endDate: string\n): Schedule[] {\n  const expandedSchedules: Schedule[] = [];\n\n  schedules.forEach(schedule => {\n    if (schedule.isRecurring) {\n      const instances = expandRecurringSchedule(schedule, startDate, endDate);\n      expandedSchedules.push(...instances);\n    } else {\n      // 일반 일정은 날짜 범위 내에 있으면 추가\n      if (schedule.startDate >= startDate && schedule.startDate <= endDate) {\n        expandedSchedules.push(schedule);\n      }\n    }\n  });\n\n  return expandedSchedules;\n}\n","/* eslint-disable */\nimport type { Schedule } from '../types/domain';\nimport { expandRecurringSchedule } from './scheduleRecurrence';\n\n/**\n * 두 일정이 시간상으로 겹치는지 확인합니다.\n * @param schedule1 첫 번째 일정\n * @param schedule2 두 번째 일정\n * @returns 겹치면 true, 아니면 false\n */\nexport function isScheduleOverlap(schedule1: Schedule, schedule2: Schedule): boolean {\n  // 같은 일정은 충돌로 간주하지 않음\n  if (schedule1.id === schedule2.id) {\n    return false;\n  }\n\n  // 날짜 비교\n  const start1 = new Date(schedule1.startDate);\n  const end1 = schedule1.endDate ? new Date(schedule1.endDate) : start1;\n  const start2 = new Date(schedule2.startDate);\n  const end2 = schedule2.endDate ? new Date(schedule2.endDate) : start2;\n\n  // 날짜가 겹치지 않으면 충돌 없음\n  if (end1 < start2 || end2 < start1) {\n    return false;\n  }\n\n  // 종일 일정인 경우 시간 체크 생략\n  if (schedule1.allDay || schedule2.allDay) {\n    return true;\n  }\n\n  // 시간이 설정되어 있지 않으면 종일로 간주\n  if (!schedule1.startTime || !schedule2.startTime) {\n    return true;\n  }\n\n  // 날짜가 같은 경우에만 시간 체크\n  const sameDay = start1.toDateString() === start2.toDateString();\n  if (!sameDay) {\n    return false;\n  }\n\n  // 시간 비교\n  const time1Start = parseTime(schedule1.startTime);\n  const time1End = schedule1.endTime ? parseTime(schedule1.endTime) : time1Start;\n  const time2Start = parseTime(schedule2.startTime);\n  const time2End = schedule2.endTime ? parseTime(schedule2.endTime) : time2Start;\n\n  // 시간이 겹치는지 확인\n  return !(time1End <= time2Start || time2End <= time1Start);\n}\n\n/**\n * HH:MM 형식의 시간을 분 단위로 변환합니다.\n */\nfunction parseTime(time: string): number {\n  const [hours, minutes] = time.split(':').map(Number);\n  return hours * 60 + minutes;\n}\n\n/**\n * 새 일정과 기존 일정들 사이의 충돌을 감지합니다.\n * @param newSchedule 확인할 새 일정\n * @param existingSchedules 기존 일정 목록\n * @returns 충돌하는 일정 배열\n */\nexport function detectScheduleConflicts(\n  newSchedule: Schedule,\n  existingSchedules: Schedule[]\n): Schedule[] {\n  const conflicts: Schedule[] = [];\n\n  // 새 일정이 반복 일정인 경우, 확장된 인스턴스로 변환\n  const newScheduleInstances: Schedule[] = newSchedule.isRecurring && newSchedule.recurrenceRule\n    ? expandRecurringSchedule(newSchedule, newSchedule.startDate, getEndDateForExpansion(newSchedule))\n    : [newSchedule];\n\n  // 기존 일정들과 비교\n  existingSchedules.forEach(existingSchedule => {\n    // 기존 일정이 반복 일정인 경우, 확장된 인스턴스로 변환\n    const existingInstances: Schedule[] = existingSchedule.isRecurring && existingSchedule.recurrenceRule\n      ? expandRecurringSchedule(existingSchedule, existingSchedule.startDate, getEndDateForExpansion(existingSchedule))\n      : [existingSchedule];\n\n    // 각 인스턴스끼리 충돌 체크\n    for (const newInstance of newScheduleInstances) {\n      for (const existingInstance of existingInstances) {\n        if (isScheduleOverlap(newInstance, existingInstance)) {\n          // 원본 일정을 충돌 목록에 추가 (중복 제거)\n          if (!conflicts.find(c => c.id === existingSchedule.id)) {\n            conflicts.push(existingSchedule);\n          }\n          break;\n        }\n      }\n      // 이미 충돌이 발견되면 다음 기존 일정으로\n      if (conflicts.find(c => c.id === existingSchedule.id)) {\n        break;\n      }\n    }\n  });\n\n  return conflicts;\n}\n\n/**\n * 일정 확장을 위한 종료일을 계산합니다.\n * 반복 종료일이 있으면 그것을 사용하고, 없으면 시작일로부터 1년 후를 사용합니다.\n */\nfunction getEndDateForExpansion(schedule: Schedule): string {\n  if (schedule.recurrenceRule?.endDate) {\n    return schedule.recurrenceRule.endDate;\n  }\n\n  // 반복 종료일이 없으면 시작일로부터 1년 후까지 확장\n  const startDate = new Date(schedule.startDate);\n  const endDate = new Date(startDate);\n  endDate.setFullYear(endDate.getFullYear() + 1);\n\n  const year = endDate.getFullYear();\n  const month = String(endDate.getMonth() + 1).padStart(2, '0');\n  const day = String(endDate.getDate()).padStart(2, '0');\n  return `${year}-${month}-${day}`;\n}\n\n/**\n * 충돌 정보를 사용자 친화적인 메시지로 변환합니다.\n */\nexport function formatConflictMessage(conflicts: Schedule[]): string {\n  if (conflicts.length === 0) {\n    return '';\n  }\n\n  if (conflicts.length === 1) {\n    const conflict = conflicts[0];\n    return `\"${conflict.title}\" 일정과 시간이 겹칩니다.`;\n  }\n\n  return `${conflicts.length}개의 일정과 시간이 겹칩니다: ${conflicts.map(c => c.title).join(', ')}`;\n}\n","import { compiledBlock as _compiledBlock } from \"million/react\";\nconst ScheduleForm_1 = _compiledBlock(_props => <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"sticky top-0 bg-white dark:bg-gray-800 border-b dark:border-gray-700 px-6 py-4 flex justify-between items-center\">\n          <h2 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n            {_props.v0}\n          </h2>\n          <button onClick={_props.v1} className=\"text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\">\n            ✕\n          </button>\n        </div>\n\n        <form onSubmit={_props.v2} className=\"p-6 space-y-3\">\n          {/* 충돌 경고 */}\n          {_props.v3}\n\n          {/* 제목 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              제목 *\n            </label>\n            <input type=\"text\" value={_props.v4} onChange={_props.v5} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" required />\n          </div>\n\n          {/* 설명 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              설명\n            </label>\n            <textarea value={_props.v6} onChange={_props.v7} rows={3} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" />\n          </div>\n\n          {/* 일정 유형 & 상태 */}\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                유형 *\n              </label>\n              <select value={_props.v8} onChange={_props.v9} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\">\n                <option value=\"construction\">공사</option>\n                <option value=\"consultation\">상담</option>\n                <option value=\"meeting\">회의</option>\n                <option value=\"other\">기타</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                상태\n              </label>\n              <select value={_props.v10} onChange={_props.v11} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\">\n                <option value=\"scheduled\">예정</option>\n                <option value=\"in_progress\">진행중</option>\n                <option value=\"completed\">완료</option>\n                <option value=\"cancelled\">취소</option>\n              </select>\n            </div>\n          </div>\n\n          {/* 종일 체크박스 */}\n          <div className=\"flex items-center\">\n            <input type=\"checkbox\" id=\"allDay\" checked={_props.v12} onChange={_props.v13} className=\"w-4 h-4 rounded border-gray-300\" />\n            <label htmlFor=\"allDay\" className=\"ml-2 text-sm text-gray-700 dark:text-gray-300\">\n              종일\n            </label>\n          </div>\n\n          {/* 시작 날짜/시간 */}\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                시작일 *\n              </label>\n              <input type=\"date\" value={_props.v14} onChange={_props.v15} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" required />\n            </div>\n\n            {_props.v16}\n          </div>\n\n          {/* 종료 날짜/시간 */}\n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                종료일\n              </label>\n              <input type=\"date\" value={_props.v17} onChange={_props.v18} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" />\n            </div>\n\n            {_props.v19}\n          </div>\n\n          {/* 건축주 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              건축주\n            </label>\n            <select value={_props.v20} onChange={_props.v21} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\">\n              <option value=\"\">선택 안함</option>\n              {_props.v22}\n            </select>\n          </div>\n\n          {/* 장소 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              장소\n            </label>\n            <input type=\"text\" value={_props.v23} onChange={_props.v24} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" />\n          </div>\n\n          {/* 우선순위 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              우선순위\n            </label>\n            <select value={_props.v25} onChange={_props.v26} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\">\n              <option value=\"low\">낮음</option>\n              <option value=\"normal\">보통</option>\n              <option value=\"high\">높음</option>\n              <option value=\"urgent\">긴급</option>\n            </select>\n          </div>\n\n          {/* 메모 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              메모\n            </label>\n            <textarea value={_props.v27} onChange={_props.v28} rows={3} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" />\n          </div>\n\n          {/* 알림 설정 */}\n          <div className=\"border-t border-gray-200 dark:border-gray-700 pt-4\">\n            <div className=\"flex items-center mb-3\">\n              <input type=\"checkbox\" id=\"reminderEnabled\" checked={_props.v29} onChange={_props.v30} className=\"w-4 h-4 rounded border-gray-300\" />\n              <label htmlFor=\"reminderEnabled\" className=\"ml-2 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                🔔 알림 받기\n              </label>\n            </div>\n\n            {_props.v31}\n          </div>\n\n          {/* 반복 일정 설정 */}\n          <div className=\"border-t border-gray-200 dark:border-gray-700 pt-4\">\n            <div className=\"flex items-center mb-3\">\n              <input type=\"checkbox\" id=\"isRecurring\" checked={_props.v32} onChange={_props.v33} className=\"w-4 h-4 rounded border-gray-300\" />\n              <label htmlFor=\"isRecurring\" className=\"ml-2 text-sm font-medium text-gray-700 dark:text-gray-300\">\n                🔄 반복 일정\n              </label>\n            </div>\n\n            {_props.v34}\n          </div>\n\n          {/* 첨부파일 */}\n          <div className=\"border-t border-gray-200 dark:border-gray-700 pt-4\">\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              📎 첨부파일\n            </label>\n\n            {/* File input */}\n            <div className=\"mb-3\">\n              <input type=\"file\" multiple onChange={_props.v35} className=\"hidden\" id=\"file-upload\" disabled={_props.v36} />\n              <label htmlFor=\"file-upload\" className={_props.v37}>\n                {_props.v38}\n              </label>\n              <span className=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">\n                최대 10MB\n              </span>\n            </div>\n\n            {/* Attachments list */}\n            {_props.v39}\n          </div>\n\n          {/* Sticky 버튼 영역 */}\n          <div className=\"sticky bottom-0 left-0 right-0 bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm border-t border-gray-200 dark:border-gray-700 px-6 py-4 rounded-b-2xl shadow-lg\">\n            <div className=\"flex justify-end space-x-3\">\n              <button type=\"button\" onClick={_props.v40} className=\"px-6 py-2.5 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-lg transition font-medium\">\n                취소\n              </button>\n              <button type=\"submit\" className=\"px-6 py-2.5 bg-indigo-600 dark:bg-indigo-500 hover:bg-indigo-700 dark:hover:bg-indigo-600 text-white rounded-lg transition font-bold\">\n                {_props.v41}\n              </button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>, {\n  name: \"ScheduleForm_1\",\n  portals: [\"v0\", \"v3\", \"v16\", \"v19\", \"v22\", \"v31\", \"v34\", \"v38\", \"v39\", \"v41\"]\n});\nconst ScheduleForm = function ScheduleForm({\n  schedule,\n  onClose\n}: Props) {\n  const {\n    saveSchedule,\n    clients,\n    schedules\n  } = useApp();\n\n  // Form state\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [scheduleType, setScheduleType] = useState<ScheduleType>('construction');\n  const [startDate, setStartDate] = useState('');\n  const [startTime, setStartTime] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [endTime, setEndTime] = useState('');\n  const [allDay, setAllDay] = useState(false);\n  const [clientId, setClientId] = useState<number | ''>('');\n  const [location, setLocation] = useState('');\n  const [status, setStatus] = useState<ScheduleStatus>('scheduled');\n  const [priority, setPriority] = useState<SchedulePriority>('normal');\n  const [notes, setNotes] = useState('');\n  const [reminderEnabled, setReminderEnabled] = useState(false);\n  const [reminderMinutesBefore, setReminderMinutesBefore] = useState<number>(30);\n  const [isRecurring, setIsRecurring] = useState(false);\n  const [recurrenceFrequency, setRecurrenceFrequency] = useState<'daily' | 'weekly' | 'monthly' | 'yearly'>('weekly');\n  const [recurrenceInterval, setRecurrenceInterval] = useState<number>(1);\n  const [recurrenceEndDate, setRecurrenceEndDate] = useState('');\n  const [recurrenceDaysOfWeek, setRecurrenceDaysOfWeek] = useState<number[]>([]);\n\n  // Conflict detection\n  const [conflicts, setConflicts] = useState<Schedule[]>([]);\n  const [showConflictWarning, setShowConflictWarning] = useState(false);\n\n  // Attachments\n  const [attachments, setAttachments] = useState<Attachment[]>([]);\n  const [uploadingFiles, setUploadingFiles] = useState<boolean>(false);\n\n  // Load existing schedule data\n  useEffect(() => {\n    if (schedule) {\n      setTitle(schedule.title);\n      setDescription(schedule.description || '');\n      setScheduleType(schedule.scheduleType);\n      setStartDate(schedule.startDate);\n      setStartTime(schedule.startTime || '');\n      setEndDate(schedule.endDate || '');\n      setEndTime(schedule.endTime || '');\n      setAllDay(schedule.allDay);\n      setClientId(schedule.clientId || '');\n      setLocation(schedule.location || '');\n      setStatus(schedule.status);\n      setPriority(schedule.priority);\n      setNotes(schedule.notes || '');\n      setReminderEnabled(schedule.reminderEnabled);\n      setReminderMinutesBefore(schedule.reminderMinutesBefore || 30);\n      setIsRecurring(schedule.isRecurring);\n      if (schedule.recurrenceRule) {\n        setRecurrenceFrequency(schedule.recurrenceRule.frequency);\n        setRecurrenceInterval(schedule.recurrenceRule.interval);\n        setRecurrenceEndDate(schedule.recurrenceRule.endDate || '');\n        setRecurrenceDaysOfWeek(schedule.recurrenceRule.daysOfWeek || []);\n      }\n      setAttachments(schedule.attachments || []);\n    }\n  }, [schedule]);\n\n  // Detect schedule conflicts\n  useEffect(() => {\n    // Skip conflict detection if missing required fields\n    if (!title.trim() || !startDate) {\n      setConflicts([]);\n      return;\n    }\n\n    // Create temporary schedule for conflict checking\n    const tempSchedule: Schedule = {\n      id: schedule?.id || 0,\n      userId: '',\n      title: title.trim(),\n      description: description.trim() || undefined,\n      scheduleType,\n      startDate,\n      startTime: allDay ? undefined : startTime || undefined,\n      endDate: endDate || undefined,\n      endTime: allDay ? undefined : endTime || undefined,\n      allDay,\n      clientId: clientId || undefined,\n      clientName: undefined,\n      status,\n      priority,\n      location: location.trim() || undefined,\n      notes: notes.trim() || undefined,\n      reminderEnabled,\n      reminderMinutesBefore: reminderEnabled ? reminderMinutesBefore : undefined,\n      isRecurring,\n      recurrenceRule: isRecurring ? {\n        frequency: recurrenceFrequency,\n        interval: recurrenceInterval,\n        endDate: recurrenceEndDate || undefined,\n        daysOfWeek: recurrenceFrequency === 'weekly' && recurrenceDaysOfWeek.length > 0 ? recurrenceDaysOfWeek : undefined\n      } : undefined,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n\n    // Filter out current schedule if editing\n    const otherSchedules = schedule ? schedules.filter(s => s.id !== schedule.id) : schedules;\n\n    // Detect conflicts\n    const detectedConflicts = detectScheduleConflicts(tempSchedule, otherSchedules);\n    setConflicts(detectedConflicts);\n    setShowConflictWarning(detectedConflicts.length > 0);\n  }, [title, startDate, startTime, endDate, endTime, allDay, isRecurring, recurrenceFrequency, recurrenceInterval, recurrenceEndDate, recurrenceDaysOfWeek, schedules, schedule, scheduleType, clientId, status, priority, location, notes, reminderEnabled, reminderMinutesBefore, description]);\n\n  // File upload handlers\n  const handleFileSelect = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (!files || files.length === 0) return;\n    setUploadingFiles(true);\n    try {\n      if (!supabase) {\n        alert('데이터베이스 연결 오류');\n        return;\n      }\n      const user = await supabase.auth.getUser();\n      if (!user.data.user) {\n        alert('로그인이 필요합니다.');\n        return;\n      }\n      const newAttachments: Attachment[] = [];\n      for (let i = 0; i < files.length; i++) {\n        const file = files[i];\n        const result = await uploadFile(file, user.data.user.id, schedule?.id || 0);\n        if (result.success && result.url && result.path) {\n          newAttachments.push({\n            name: file.name,\n            url: result.url,\n            type: file.type\n          });\n        } else {\n          alert(`파일 업로드 실패: ${file.name}\\n${result.error}`);\n        }\n      }\n      setAttachments([...attachments, ...newAttachments]);\n    } catch (error: any) {\n      console.error('File upload error:', error);\n      alert('파일 업로드 중 오류가 발생했습니다.');\n    } finally {\n      setUploadingFiles(false);\n      e.target.value = ''; // Reset file input\n    }\n  };\n  const handleRemoveAttachment = async (index: number) => {\n    // Note: We don't delete from storage here because the file path is embedded in the URL\n    // and we would need to store the path separately. For now, just remove from state.\n\n    setAttachments(attachments.filter((_, i) => i !== index));\n  };\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!title.trim() || !startDate) {\n      alert('제목과 시작일은 필수입니다.');\n      return;\n    }\n    const clientName = clientId ? clients.find((c: Client) => c.id === clientId)?.name : undefined;\n    const newSchedule: Schedule = {\n      id: schedule?.id || 0,\n      userId: '',\n      // Will be set by AppContext\n      title: title.trim(),\n      description: description.trim() || undefined,\n      scheduleType,\n      startDate,\n      startTime: allDay ? undefined : startTime || undefined,\n      endDate: endDate || undefined,\n      endTime: allDay ? undefined : endTime || undefined,\n      allDay,\n      clientId: clientId || undefined,\n      clientName,\n      status,\n      priority,\n      location: location.trim() || undefined,\n      notes: notes.trim() || undefined,\n      reminderEnabled: reminderEnabled,\n      reminderMinutesBefore: reminderEnabled ? reminderMinutesBefore : undefined,\n      isRecurring: isRecurring,\n      recurrenceRule: isRecurring ? {\n        frequency: recurrenceFrequency,\n        interval: recurrenceInterval,\n        endDate: recurrenceEndDate || undefined,\n        daysOfWeek: recurrenceFrequency === 'weekly' && recurrenceDaysOfWeek.length > 0 ? recurrenceDaysOfWeek : undefined\n      } : undefined,\n      attachments: attachments.length > 0 ? attachments : undefined,\n      createdAt: schedule?.createdAt || new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    await saveSchedule(newSchedule);\n    onClose();\n  };\n  return /*@million jsx-skip*/<ScheduleForm_1 v0={schedule ? '일정 수정' : '일정 추가'} v1={onClose} v2={handleSubmit} v3={showConflictWarning && conflicts.length > 0 && <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-400 dark:border-yellow-600 p-4\">\n              <div className=\"flex items-start\">\n                <div className=\"flex-shrink-0\">\n                  <svg className=\"h-5 w-5 text-yellow-400 dark:text-yellow-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                    <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                  </svg>\n                </div>\n                <div className=\"ml-3 flex-1\">\n                  <h3 className=\"text-sm font-medium text-yellow-800 dark:text-yellow-200\">\n                    ⚠️ 일정 충돌 감지\n                  </h3>\n                  <div className=\"mt-2 text-sm text-yellow-700 dark:text-yellow-300\">\n                    <p>{formatConflictMessage(conflicts)}</p>\n                    <div className=\"mt-2\">\n                      <p className=\"font-medium\">충돌하는 일정:</p>\n                      <ul className=\"mt-1 list-disc list-inside\">\n                        {conflicts.map(conflict => <li key={conflict.id}>\n                            {conflict.title} ({conflict.startDate}{conflict.startTime ? ` ${conflict.startTime}` : ''})\n                          </li>)}\n                      </ul>\n                    </div>\n                  </div>\n                  <div className=\"mt-3\">\n                    <button type=\"button\" onClick={() => setShowConflictWarning(false)} className=\"text-sm font-medium text-yellow-800 dark:text-yellow-200 hover:text-yellow-900 dark:hover:text-yellow-100\">\n                      무시하고 계속하기 →\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>} v4={title} v5={e => setTitle(e.target.value)} v6={description} v7={e => setDescription(e.target.value)} v8={scheduleType} v9={e => setScheduleType(e.target.value as ScheduleType)} v10={status} v11={e => setStatus(e.target.value as ScheduleStatus)} v12={allDay} v13={e => setAllDay(e.target.checked)} v14={startDate} v15={e => setStartDate(e.target.value)} v16={!allDay && <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  시작 시간\n                </label>\n                <input type=\"time\" value={startTime} onChange={e => setStartTime(e.target.value)} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" />\n              </div>} v17={endDate} v18={e => setEndDate(e.target.value)} v19={!allDay && <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  종료 시간\n                </label>\n                <input type=\"time\" value={endTime} onChange={e => setEndTime(e.target.value)} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" />\n              </div>} v20={clientId} v21={e => setClientId(e.target.value ? Number(e.target.value) : '')} v22={clients.map((client: Client) => <option key={client.id} value={client.id}>\n                  {client.name}\n                </option>)} v23={location} v24={e => setLocation(e.target.value)} v25={priority} v26={e => setPriority(e.target.value as SchedulePriority)} v27={notes} v28={e => setNotes(e.target.value)} v29={reminderEnabled} v30={e => setReminderEnabled(e.target.checked)} v31={reminderEnabled && <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                  알림 시간\n                </label>\n                <select value={reminderMinutesBefore} onChange={e => setReminderMinutesBefore(Number(e.target.value))} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\">\n                  <option value={15}>15분 전</option>\n                  <option value={30}>30분 전</option>\n                  <option value={60}>1시간 전</option>\n                  <option value={120}>2시간 전</option>\n                  <option value={1440}>1일 전</option>\n                </select>\n              </div>} v32={isRecurring} v33={e => setIsRecurring(e.target.checked)} v34={isRecurring && <div className=\"space-y-3\">\n                {/* 반복 유형 & 간격 */}\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      반복 유형\n                    </label>\n                    <select value={recurrenceFrequency} onChange={e => setRecurrenceFrequency(e.target.value as 'daily' | 'weekly' | 'monthly' | 'yearly')} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\">\n                      <option value=\"daily\">매일</option>\n                      <option value=\"weekly\">매주</option>\n                      <option value=\"monthly\">매월</option>\n                      <option value=\"yearly\">매년</option>\n                    </select>\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      간격\n                    </label>\n                    <input type=\"number\" min=\"1\" max=\"365\" value={recurrenceInterval} onChange={e => setRecurrenceInterval(Number(e.target.value))} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" />\n                  </div>\n                </div>\n\n                {/* 요일 선택 (주간 반복인 경우만) */}\n                {recurrenceFrequency === 'weekly' && <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                      요일 선택\n                    </label>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {['일', '월', '화', '수', '목', '금', '토'].map((day, index) => <button key={index} type=\"button\" onClick={() => {\n          if (recurrenceDaysOfWeek.includes(index)) {\n            setRecurrenceDaysOfWeek(recurrenceDaysOfWeek.filter(d => d !== index));\n          } else {\n            setRecurrenceDaysOfWeek([...recurrenceDaysOfWeek, index]);\n          }\n        }} className={`px-3 py-1 rounded-lg text-sm ${recurrenceDaysOfWeek.includes(index) ? 'bg-blue-600 text-white dark:bg-blue-500' : 'bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-300'}`}>\n                          {day}\n                        </button>)}\n                    </div>\n                  </div>}\n\n                {/* 종료일 */}\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                    반복 종료일 (선택)\n                  </label>\n                  <input type=\"date\" value={recurrenceEndDate} onChange={e => setRecurrenceEndDate(e.target.value)} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" />\n                </div>\n              </div>} v35={handleFileSelect} v36={uploadingFiles} v37={`inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-sm font-medium cursor-pointer\n                  ${uploadingFiles ? 'bg-gray-100 dark:bg-gray-700 text-gray-400 cursor-not-allowed' : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'}`} v38={uploadingFiles ? '업로드 중...' : '파일 선택'} v39={attachments.length > 0 && <div className=\"space-y-2\">\n                {attachments.map((attachment, index) => <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <div className=\"flex items-center gap-2 flex-1 min-w-0\">\n                      <span className=\"text-xl\">{getFileIcon(attachment.name)}</span>\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-gray-900 dark:text-white truncate\">\n                          {attachment.name}\n                        </p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          {attachment.type}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <a href={attachment.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 text-sm\">\n                        다운로드\n                      </a>\n                      <button type=\"button\" onClick={() => handleRemoveAttachment(index)} className=\"text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 text-sm\">\n                        삭제\n                      </button>\n                    </div>\n                  </div>)}\n              </div>} v40={onClose} v41={schedule ? '수정' : '추가'} />;\n};\nimport { block as _block } from \"million/react\";\n/* eslint-disable */\nimport { useState, useEffect } from 'react';\nimport { useApp } from '../../contexts/AppContext';\nimport type { Schedule, ScheduleType, ScheduleStatus, SchedulePriority, Client } from '../../types/domain';\nimport { detectScheduleConflicts, formatConflictMessage } from '../../utils/scheduleConflict';\nimport { uploadFile, getFileIcon } from '../../services/fileUploadService';\nimport type { Attachment } from '../../types/domain';\nimport { supabase } from '../../services/supabase';\ninterface Props {\n  schedule: Schedule | null;\n  onClose: () => void;\n}\nexport default ScheduleForm;","import { compiledBlock as _compiledBlock } from \"million/react\";\nconst ScheduleFilters_1 = _compiledBlock(_props => <div className=\"mb-4\">\n      {/* 필터 토글 버튼 */}\n      <div className=\"flex items-center gap-3 mb-3\">\n        <button onClick={_props.v0} className=\"flex items-center gap-2 px-4 py-2 bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 rounded-lg border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700\">\n          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z\" />\n          </svg>\n          필터\n          {_props.v1}\n        </button>\n\n        {/* 검색 입력 */}\n        <div className=\"flex-1 relative\">\n          <input type=\"text\" value={_props.v2} onChange={_props.v3} placeholder=\"일정 제목이나 설명으로 검색...\" className=\"w-full px-4 py-2 pl-10 bg-white dark:bg-gray-800 text-gray-900 dark:text-white border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\" />\n          <svg className=\"w-5 h-5 text-gray-400 absolute left-3 top-2.5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n          </svg>\n        </div>\n\n        {_props.v4}\n      </div>\n\n      {/* 필터 옵션 패널 */}\n      {_props.v5}\n    </div>, {\n  name: \"ScheduleFilters_1\",\n  portals: [\"v1\", \"v4\", \"v5\"]\n});\nconst ScheduleFilters = function ScheduleFilters({\n  clients,\n  onFilterChange\n}: ScheduleFiltersProps) {\n  const [showFilters, setShowFilters] = useState(false);\n  const [filters, setFilters] = useState<FilterState>({\n    scheduleType: [],\n    status: [],\n    clientId: null,\n    searchText: ''\n  });\n\n  // 일정 타입 옵션\n  const scheduleTypes: Array<{\n    value: ScheduleType;\n    label: string;\n    icon: string;\n  }> = [{\n    value: 'construction',\n    label: '공사',\n    icon: '🏗️'\n  }, {\n    value: 'consultation',\n    label: '상담',\n    icon: '💬'\n  }, {\n    value: 'meeting',\n    label: '미팅',\n    icon: '👥'\n  }, {\n    value: 'other',\n    label: '기타',\n    icon: '📝'\n  }];\n\n  // 상태 옵션\n  const statusOptions: Array<{\n    value: ScheduleStatus;\n    label: string;\n    icon: string;\n  }> = [{\n    value: 'scheduled',\n    label: '예정',\n    icon: '📅'\n  }, {\n    value: 'in_progress',\n    label: '진행중',\n    icon: '⏳'\n  }, {\n    value: 'completed',\n    label: '완료',\n    icon: '✅'\n  }, {\n    value: 'cancelled',\n    label: '취소',\n    icon: '❌'\n  }];\n  const handleTypeToggle = (type: ScheduleType) => {\n    const newTypes = filters.scheduleType.includes(type) ? filters.scheduleType.filter(t => t !== type) : [...filters.scheduleType, type];\n    const newFilters = {\n      ...filters,\n      scheduleType: newTypes\n    };\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n  const handleStatusToggle = (status: ScheduleStatus) => {\n    const newStatuses = filters.status.includes(status) ? filters.status.filter(s => s !== status) : [...filters.status, status];\n    const newFilters = {\n      ...filters,\n      status: newStatuses\n    };\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n  const handleClientChange = (clientIdStr: string) => {\n    const clientId: ID | null = clientIdStr ? isNaN(parseInt(clientIdStr)) ? clientIdStr : parseInt(clientIdStr) : null;\n    const newFilters = {\n      ...filters,\n      clientId\n    };\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n  const handleSearchChange = (searchText: string) => {\n    const newFilters = {\n      ...filters,\n      searchText\n    };\n    setFilters(newFilters);\n    onFilterChange(newFilters);\n  };\n  const handleReset = () => {\n    const resetFilters: FilterState = {\n      scheduleType: [],\n      status: [],\n      clientId: null,\n      searchText: ''\n    };\n    setFilters(resetFilters);\n    onFilterChange(resetFilters);\n  };\n  const activeFilterCount = filters.scheduleType.length + filters.status.length + (filters.clientId ? 1 : 0) + (filters.searchText ? 1 : 0);\n  return /*@million jsx-skip*/<ScheduleFilters_1 v0={() => setShowFilters(!showFilters)} v1={activeFilterCount > 0 && <span className=\"px-2 py-0.5 text-xs bg-blue-600 text-white rounded-full\">\n              {activeFilterCount}\n            </span>} v2={filters.searchText} v3={e => handleSearchChange(e.target.value)} v4={activeFilterCount > 0 && <button onClick={handleReset} className=\"px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white\">\n            초기화\n          </button>} v5={showFilters && <div className=\"p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 space-y-4\">\n          {/* 일정 타입 필터 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              일정 타입\n            </label>\n            <div className=\"flex flex-wrap gap-2\">\n              {scheduleTypes.map(type => <button key={type.value} onClick={() => handleTypeToggle(type.value)} className={`px-3 py-1.5 rounded-lg text-sm transition-colors ${filters.scheduleType.includes(type.value) ? 'bg-blue-600 text-white dark:bg-blue-500' : 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'}`}>\n                  {type.icon} {type.label}\n                </button>)}\n            </div>\n          </div>\n\n          {/* 상태 필터 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              상태\n            </label>\n            <div className=\"flex flex-wrap gap-2\">\n              {statusOptions.map(status => <button key={status.value} onClick={() => handleStatusToggle(status.value)} className={`px-3 py-1.5 rounded-lg text-sm transition-colors ${filters.status.includes(status.value) ? 'bg-blue-600 text-white dark:bg-blue-500' : 'bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600'}`}>\n                  {status.icon} {status.label}\n                </button>)}\n            </div>\n          </div>\n\n          {/* 건축주 필터 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              건축주\n            </label>\n            <select value={filters.clientId || ''} onChange={e => handleClientChange(e.target.value)} className=\"w-full px-3 py-2 bg-white dark:bg-gray-700 text-gray-900 dark:text-white border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\">\n              <option value=\"\">전체 건축주</option>\n              {clients.map(client => <option key={client.id} value={client.id}>\n                  {client.name}\n                </option>)}\n            </select>\n          </div>\n        </div>} />;\n};\nimport { block as _block } from \"million/react\";\n/* eslint-disable */\nimport { useState } from 'react';\nimport type { ScheduleType, ScheduleStatus } from '../../types/domain';\nimport type { ID } from '../../types/domain';\ninterface ScheduleFiltersProps {\n  clients: Array<{\n    id: ID;\n    name: string;\n  }>;\n  onFilterChange: (filters: FilterState) => void;\n}\nexport interface FilterState {\n  scheduleType: ScheduleType[];\n  status: ScheduleStatus[];\n  clientId: ID | null;\n  searchText: string;\n}\nexport default ScheduleFilters;","/* eslint-disable */\nimport type { Schedule } from '../types/domain';\n\n// Google API 클라이언트 설정\nconst GOOGLE_CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID || '';\nconst GOOGLE_API_KEY = process.env.REACT_APP_GOOGLE_API_KEY || '';\nconst DISCOVERY_DOCS = ['https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest'];\nconst SCOPES = 'https://www.googleapis.com/auth/calendar';\n\n// 환경 변수 로드 확인\nconsole.log('🔑 Google Calendar 환경 변수 확인:');\nconsole.log('  CLIENT_ID:', GOOGLE_CLIENT_ID ? '✅ 설정됨' : '❌ 없음');\nconsole.log('  API_KEY:', GOOGLE_API_KEY ? '✅ 설정됨' : '❌ 없음');\n\ndeclare global {\n  interface Window {\n    gapi: any;\n    google: any;\n  }\n}\n\nlet gapiInitialized = false;\nlet tokenClient: any = null;\n\n/**\n * Google API 클라이언트 초기화\n */\nexport async function initGoogleApi(): Promise<boolean> {\n  if (gapiInitialized) return true;\n\n  return new Promise((resolve) => {\n    // gapi 스크립트 로드\n    const gapiScript = document.createElement('script');\n    gapiScript.src = 'https://apis.google.com/js/api.js';\n    gapiScript.async = true;\n    gapiScript.defer = true;\n    gapiScript.onload = () => {\n      window.gapi.load('client', async () => {\n        try {\n          await window.gapi.client.init({\n            apiKey: GOOGLE_API_KEY,\n            discoveryDocs: DISCOVERY_DOCS,\n          });\n          gapiInitialized = true;\n\n          // Google Identity Services 초기화\n          const gisScript = document.createElement('script');\n          gisScript.src = 'https://accounts.google.com/gsi/client';\n          gisScript.async = true;\n          gisScript.defer = true;\n          gisScript.onload = () => {\n            tokenClient = window.google.accounts.oauth2.initTokenClient({\n              client_id: GOOGLE_CLIENT_ID,\n              scope: SCOPES,\n              callback: '', // 나중에 설정\n            });\n            resolve(true);\n          };\n          document.head.appendChild(gisScript);\n        } catch (error) {\n          console.error('Google API 초기화 실패:', error);\n          resolve(false);\n        }\n      });\n    };\n    document.head.appendChild(gapiScript);\n  });\n}\n\n/**\n * Google 계정 인증\n */\nexport async function authenticateGoogleCalendar(): Promise<boolean> {\n  console.log('🔐 Google Calendar 인증 시작...');\n\n  // 환경 변수 확인\n  if (!GOOGLE_CLIENT_ID || !GOOGLE_API_KEY) {\n    const missing = [];\n    if (!GOOGLE_CLIENT_ID) missing.push('REACT_APP_GOOGLE_CLIENT_ID');\n    if (!GOOGLE_API_KEY) missing.push('REACT_APP_GOOGLE_API_KEY');\n    console.error('❌ 환경 변수 누락:', missing.join(', '));\n    alert(`환경 변수가 설정되지 않았습니다:\\n${missing.join('\\n')}\\n\\n.env 파일을 확인해주세요.`);\n    return false;\n  }\n\n  if (!gapiInitialized) {\n    console.log('⏳ Google API 초기화 중...');\n    const initialized = await initGoogleApi();\n    if (!initialized) {\n      console.error('❌ Google API 초기화 실패');\n      alert('Google API 초기화에 실패했습니다.\\n네트워크 연결을 확인해주세요.');\n      return false;\n    }\n    console.log('✅ Google API 초기화 완료');\n  }\n\n  if (!tokenClient) {\n    console.error('❌ tokenClient가 초기화되지 않았습니다');\n    alert('Google OAuth 클라이언트 초기화에 실패했습니다.\\nClient ID를 확인해주세요.');\n    return false;\n  }\n\n  return new Promise((resolve) => {\n    tokenClient.callback = (response: any) => {\n      if (response.error !== undefined) {\n        console.error('❌ 인증 실패:', response);\n        alert(`Google 계정 연결 실패:\\n${response.error}\\n\\n${response.error_description || '알 수 없는 오류'}`);\n        resolve(false);\n        return;\n      }\n      console.log('✅ 인증 성공');\n      resolve(true);\n    };\n\n    // 이미 인증된 경우\n    if (window.gapi.client.getToken() !== null) {\n      console.log('✅ 이미 인증됨');\n      resolve(true);\n      return;\n    }\n\n    // 새로운 인증 요청\n    console.log('🔓 OAuth 팝업 열기...');\n    try {\n      // prompt: 'consent' 제거 - 처음 한 번만 인증, 이후 자동 갱신\n      tokenClient.requestAccessToken({ prompt: '' });\n    } catch (error: any) {\n      console.error('❌ OAuth 요청 실패:', error);\n      alert(`OAuth 요청 실패:\\n${error.message || '알 수 없는 오류'}\\n\\n팝업이 차단되었는지 확인해주세요.`);\n      resolve(false);\n    }\n  });\n}\n\n/**\n * 인증 토큰 제거 (로그아웃)\n */\nexport function signOutGoogleCalendar(): void {\n  const token = window.gapi.client.getToken();\n  if (token !== null) {\n    window.google.accounts.oauth2.revoke(token.access_token, () => {\n      console.log('Google Calendar 연결 해제 완료');\n    });\n    window.gapi.client.setToken(null);\n  }\n}\n\n/**\n * 인증 상태 확인\n */\nexport function isGoogleCalendarAuthenticated(): boolean {\n  return gapiInitialized && window.gapi.client.getToken() !== null;\n}\n\n/**\n * Schedule을 Google Calendar 이벤트로 변환\n */\nfunction scheduleToGoogleEvent(schedule: Schedule): any {\n  const event: any = {\n    summary: schedule.title,\n    description: schedule.description || '',\n    location: schedule.location || '',\n  };\n\n  // 날짜/시간 설정\n  if (schedule.allDay) {\n    event.start = { date: schedule.startDate };\n    event.end = { date: schedule.endDate || schedule.startDate };\n  } else {\n    const startDateTime = `${schedule.startDate}T${schedule.startTime || '00:00:00'}`;\n    const endDateTime = schedule.endDate && schedule.endTime\n      ? `${schedule.endDate}T${schedule.endTime}`\n      : `${schedule.startDate}T${schedule.endTime || '23:59:59'}`;\n\n    event.start = { dateTime: startDateTime, timeZone: 'Asia/Seoul' };\n    event.end = { dateTime: endDateTime, timeZone: 'Asia/Seoul' };\n  }\n\n  // 반복 일정 설정\n  if (schedule.isRecurring && schedule.recurrenceRule) {\n    const { frequency, interval, endDate, daysOfWeek } = schedule.recurrenceRule;\n    let rrule = `RRULE:FREQ=${frequency.toUpperCase()};INTERVAL=${interval}`;\n\n    if (endDate) {\n      rrule += `;UNTIL=${endDate.replace(/-/g, '')}`;\n    }\n\n    if (frequency === 'weekly' && daysOfWeek && daysOfWeek.length > 0) {\n      const dayNames = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\n      const byDay = daysOfWeek.map(d => dayNames[d]).join(',');\n      rrule += `;BYDAY=${byDay}`;\n    }\n\n    event.recurrence = [rrule];\n  }\n\n  // 알림 설정\n  if (schedule.reminderEnabled && schedule.reminderMinutesBefore) {\n    event.reminders = {\n      useDefault: false,\n      overrides: [\n        { method: 'popup', minutes: schedule.reminderMinutesBefore },\n        { method: 'email', minutes: schedule.reminderMinutesBefore },\n      ],\n    };\n  }\n\n  return event;\n}\n\n/**\n * Google Calendar 이벤트를 Schedule로 변환\n */\nfunction googleEventToSchedule(event: any): Schedule {\n  const isAllDay = !!event.start.date;\n\n  const schedule: Schedule = {\n    id: 0, // 임시 ID (저장 시 실제 ID 할당)\n    userId: '',\n    title: event.summary || '제목 없음',\n    description: event.description || undefined,\n    scheduleType: 'other',\n    startDate: isAllDay ? event.start.date : event.start.dateTime.split('T')[0],\n    startTime: isAllDay ? undefined : event.start.dateTime.split('T')[1].substring(0, 5),\n    endDate: isAllDay ? event.end.date : (event.end?.dateTime?.split('T')[0] || undefined),\n    endTime: isAllDay ? undefined : (event.end?.dateTime ? event.end.dateTime.split('T')[1].substring(0, 5) : undefined),\n    allDay: isAllDay,\n    status: 'scheduled',\n    priority: 'normal',\n    location: event.location || undefined,\n    reminderEnabled: false,\n    isRecurring: !!event.recurrence,\n    createdAt: event.created || new Date().toISOString(),\n    updatedAt: event.updated || new Date().toISOString(),\n  };\n\n  return schedule;\n}\n\n/**\n * 구글 캘린더에 일정 내보내기 (업로드)\n */\nexport async function exportToGoogleCalendar(schedules: Schedule[]): Promise<{ success: number; failed: number }> {\n  if (!isGoogleCalendarAuthenticated()) {\n    throw new Error('Google Calendar 인증이 필요합니다.');\n  }\n\n  let success = 0;\n  let failed = 0;\n\n  for (const schedule of schedules) {\n    try {\n      const event = scheduleToGoogleEvent(schedule);\n      await window.gapi.client.calendar.events.insert({\n        calendarId: 'primary',\n        resource: event,\n      });\n      success++;\n    } catch (error) {\n      console.error('일정 내보내기 실패:', schedule.title, error);\n      failed++;\n    }\n  }\n\n  return { success, failed };\n}\n\n/**\n * 구글 캘린더에서 일정 가져오기 (다운로드)\n */\nexport async function importFromGoogleCalendar(\n  startDate?: string,\n  endDate?: string\n): Promise<Schedule[]> {\n  if (!isGoogleCalendarAuthenticated()) {\n    throw new Error('Google Calendar 인증이 필요합니다.');\n  }\n\n  try {\n    const response = await window.gapi.client.calendar.events.list({\n      calendarId: 'primary',\n      timeMin: startDate ? `${startDate}T00:00:00Z` : new Date().toISOString(),\n      timeMax: endDate ? `${endDate}T23:59:59Z` : undefined,\n      showDeleted: false,\n      singleEvents: true,\n      maxResults: 100,\n      orderBy: 'startTime',\n    });\n\n    const events = response.result.items || [];\n    return events.map(googleEventToSchedule);\n  } catch (error) {\n    console.error('일정 가져오기 실패:', error);\n    throw error;\n  }\n}\n\n/**\n * 구글 캘린더와 양방향 동기화\n */\nexport async function syncWithGoogleCalendar(\n  localSchedules: Schedule[],\n  options: {\n    importFromGoogle: boolean;\n    exportToGoogle: boolean;\n    startDate?: string;\n    endDate?: string;\n  }\n): Promise<{\n  imported: Schedule[];\n  exported: { success: number; failed: number };\n}> {\n  const result = {\n    imported: [] as Schedule[],\n    exported: { success: 0, failed: 0 },\n  };\n\n  // 1. 구글에서 가져오기\n  if (options.importFromGoogle) {\n    try {\n      result.imported = await importFromGoogleCalendar(options.startDate, options.endDate);\n    } catch (error) {\n      console.error('가져오기 실패:', error);\n    }\n  }\n\n  // 2. 구글로 내보내기\n  if (options.exportToGoogle) {\n    try {\n      result.exported = await exportToGoogleCalendar(localSchedules);\n    } catch (error) {\n      console.error('내보내기 실패:', error);\n    }\n  }\n\n  return result;\n}\n","import { compiledBlock as _compiledBlock } from \"million/react\";\nconst GoogleCalendarSync_1 = _compiledBlock(_props => <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl w-full max-w-lg\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center p-6 border-b border-gray-200 dark:border-gray-700\">\n          <h2 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n            📅 Google Calendar 동기화\n          </h2>\n          <button onClick={_props.v0} className=\"text-gray-400 hover:text-gray-600 dark:hover:text-gray-300\">\n            ✕\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 space-y-6\">\n          {/* 인증 상태 */}\n          <div className=\"bg-gray-50 dark:bg-gray-700/50 rounded-lg p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                  연결 상태\n                </p>\n                <p className={_props.v1}>\n                  {_props.v2}\n                </p>\n              </div>\n              {_props.v3}\n            </div>\n          </div>\n\n          {/* 동기화 옵션 */}\n          {_props.v4}\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex justify-end gap-3 p-6 border-t border-gray-200 dark:border-gray-700\">\n          <button onClick={_props.v5} className=\"px-4 py-2 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg\">\n            닫기\n          </button>\n          {_props.v6}\n        </div>\n      </div>\n    </div>, {\n  name: \"GoogleCalendarSync_1\",\n  portals: [\"v2\", \"v3\", \"v4\", \"v6\"]\n});\nconst GoogleCalendarSync = function GoogleCalendarSync({\n  onClose\n}: Props) {\n  const {\n    schedules,\n    saveSchedule\n  } = useApp();\n  const [isAuthenticated, setIsAuthenticated] = useState(isGoogleCalendarAuthenticated());\n  const [syncing, setSyncing] = useState(false);\n  const [syncResult, setSyncResult] = useState<{\n    imported: number;\n    exported: number;\n    failed: number;\n  } | null>(null);\n  const [options, setOptions] = useState({\n    importFromGoogle: true,\n    exportToGoogle: true,\n    startDate: '',\n    endDate: ''\n  });\n  const handleAuthenticate = async () => {\n    try {\n      const success = await authenticateGoogleCalendar();\n      if (success) {\n        setIsAuthenticated(true);\n        alert('Google 계정 연결 완료!');\n      } else {\n        alert('Google 계정 연결 실패');\n      }\n    } catch (error) {\n      console.error('인증 실패:', error);\n      alert('인증 중 오류가 발생했습니다.');\n    }\n  };\n  const handleSignOut = () => {\n    signOutGoogleCalendar();\n    setIsAuthenticated(false);\n    alert('Google Calendar 연결이 해제되었습니다.');\n  };\n  const handleSync = async () => {\n    if (!isAuthenticated) {\n      alert('먼저 Google 계정을 연결해주세요.');\n      return;\n    }\n    setSyncing(true);\n    setSyncResult(null);\n    try {\n      const result = await syncWithGoogleCalendar(schedules, options);\n\n      // 가져온 일정들을 로컬에 저장\n      if (result.imported.length > 0) {\n        for (const schedule of result.imported) {\n          await saveSchedule(schedule);\n        }\n      }\n      setSyncResult({\n        imported: result.imported.length,\n        exported: result.exported.success,\n        failed: result.exported.failed\n      });\n      alert(`동기화 완료!\\n가져오기: ${result.imported.length}개\\n내보내기: ${result.exported.success}개\\n실패: ${result.exported.failed}개`);\n    } catch (error: any) {\n      console.error('동기화 실패:', error);\n      alert(`동기화 중 오류가 발생했습니다: ${error.message}`);\n    } finally {\n      setSyncing(false);\n    }\n  };\n  return /*@million jsx-skip*/<GoogleCalendarSync_1 v0={onClose} v1={`text-sm ${isAuthenticated ? 'text-green-600 dark:text-green-400' : 'text-gray-500 dark:text-gray-400'}`} v2={isAuthenticated ? '✅ 연결됨' : '❌ 연결 안됨'} v3={isAuthenticated ? <button onClick={handleSignOut} className=\"px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg\">\n                  연결 해제\n                </button> : <button onClick={handleAuthenticate} className=\"px-4 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700\">\n                  Google 연결\n                </button>} v4={isAuthenticated && <>\n              <div className=\"space-y-3\">\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  동기화 옵션\n                </label>\n\n                <label className=\"flex items-center gap-2\">\n                  <input type=\"checkbox\" checked={options.importFromGoogle} onChange={e => setOptions({\n          ...options,\n          importFromGoogle: e.target.checked\n        })} className=\"w-4 h-4 rounded border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-blue-600 focus:ring-blue-500 dark:focus:ring-blue-400\" />\n                  <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                    Google Calendar → 이 앱으로 가져오기\n                  </span>\n                </label>\n\n                <label className=\"flex items-center gap-2\">\n                  <input type=\"checkbox\" checked={options.exportToGoogle} onChange={e => setOptions({\n          ...options,\n          exportToGoogle: e.target.checked\n        })} className=\"w-4 h-4 rounded border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-blue-600 focus:ring-blue-500 dark:focus:ring-blue-400\" />\n                  <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                    이 앱 → Google Calendar로 내보내기\n                  </span>\n                </label>\n              </div>\n\n              {/* 날짜 범위 (가져오기용) */}\n              {options.importFromGoogle && <div className=\"space-y-3\">\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300\">\n                    가져올 날짜 범위 (선택사항)\n                  </label>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <div>\n                      <label className=\"block text-xs text-gray-500 dark:text-gray-400 mb-1\">\n                        시작일\n                      </label>\n                      <input type=\"date\" value={options.startDate} onChange={e => setOptions({\n            ...options,\n            startDate: e.target.value\n          })} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs text-gray-500 dark:text-gray-400 mb-1\">\n                        종료일\n                      </label>\n                      <input type=\"date\" value={options.endDate} onChange={e => setOptions({\n            ...options,\n            endDate: e.target.value\n          })} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\" />\n                    </div>\n                  </div>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    * 날짜를 지정하지 않으면 오늘부터 최대 100개의 일정을 가져옵니다.\n                  </p>\n                </div>}\n\n              {/* 동기화 결과 */}\n              {syncResult && <div className=\"bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4\">\n                  <p className=\"text-sm font-medium text-green-800 dark:text-green-400 mb-2\">\n                    ✅ 동기화 완료\n                  </p>\n                  <ul className=\"text-sm text-green-700 dark:text-green-300 space-y-1\">\n                    <li>• 가져온 일정: {syncResult.imported}개</li>\n                    <li>• 내보낸 일정: {syncResult.exported}개</li>\n                    {syncResult.failed > 0 && <li className=\"text-red-600 dark:text-red-400\">• 실패: {syncResult.failed}개</li>}\n                  </ul>\n                </div>}\n\n              {/* 주의사항 */}\n              <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\n                <p className=\"text-sm font-medium text-yellow-800 dark:text-yellow-400 mb-2\">\n                  ⚠️ 주의사항\n                </p>\n                <ul className=\"text-xs text-yellow-700 dark:text-yellow-300 space-y-1\">\n                  <li>• 중복 일정이 생성될 수 있습니다.</li>\n                  <li>• 내보내기는 모든 일정을 Google Calendar에 새로 생성합니다.</li>\n                  <li>• 가져오기는 지정된 날짜 범위의 일정만 가져옵니다.</li>\n                </ul>\n              </div>\n            </>} v5={onClose} v6={isAuthenticated && <button onClick={handleSync} disabled={syncing || !options.importFromGoogle && !options.exportToGoogle} className={`px-4 py-2 rounded-lg ${syncing || !options.importFromGoogle && !options.exportToGoogle ? 'bg-gray-300 dark:bg-gray-600 text-gray-500 cursor-not-allowed' : 'bg-blue-600 text-white hover:bg-blue-700'}`}>\n              {syncing ? '동기화 중...' : '동기화 시작'}\n            </button>} />;\n};\nimport { block as _block } from \"million/react\";\n/* eslint-disable */\nimport { useState } from 'react';\nimport { useApp } from '../../contexts/AppContext';\nimport { authenticateGoogleCalendar, signOutGoogleCalendar, isGoogleCalendarAuthenticated, syncWithGoogleCalendar } from '../../services/googleCalendarService';\ninterface Props {\n  onClose: () => void;\n}\nexport default GoogleCalendarSync;","import { compiledBlock as _compiledBlock } from \"million/react\";\nconst Schedules_1 = _compiledBlock(_props => <div className=\"p-6 bg-gray-50 dark:bg-gray-900 min-h-screen\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">일정 관리</h1>\n          <div className=\"flex gap-2\">\n            <button onClick={_props.v0} className=\"px-4 py-2 bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600\">\n              📅 Google Calendar\n            </button>\n            <button onClick={_props.v1} className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600\">\n              + 일정 추가\n            </button>\n          </div>\n        </div>\n\n        {/* View Mode Toggle */}\n        <div className=\"flex gap-2\">\n          <button onClick={_props.v2} className={_props.v3}>\n            리스트\n          </button>\n          <button onClick={_props.v4} className={_props.v5}>\n            일간\n          </button>\n          <button onClick={_props.v6} className={_props.v7}>\n            주간\n          </button>\n          <button onClick={_props.v8} className={_props.v9}>\n            월간\n          </button>\n        </div>\n      </div>\n\n      {/* Filters */}\n      {_props.v10}\n\n      {/* Content */}\n      {_props.v11}\n      {_props.v12}\n      {_props.v13}\n      {_props.v14}\n\n      {/* Form Modal */}\n      {_props.v15}\n\n      {/* Google Calendar Sync Modal */}\n      {_props.v16}\n    </div>, {\n  name: \"Schedules_1\",\n  portals: [\"v10\", \"v11\", \"v12\", \"v13\", \"v14\", \"v15\", \"v16\"]\n});\nconst Schedules = function Schedules() {\n  const {\n    schedules,\n    clients\n  } = useApp();\n  const [viewMode, setViewMode] = useState<ViewMode>('list');\n  const [currentDate, setCurrentDate] = useState<Date>(new Date());\n  const [showForm, setShowForm] = useState(false);\n  const [showGoogleSync, setShowGoogleSync] = useState(false);\n  const [editingSchedule, setEditingSchedule] = useState<Schedule | null>(null);\n  const [filters, setFilters] = useState<FilterState>({\n    scheduleType: [],\n    status: [],\n    clientId: null,\n    searchText: ''\n  });\n  useEffect(() => {\n    /* eslint-disable no-console */\n    console.log('✅ [Schedules] Component mounted');\n    /* eslint-enable no-console */\n  }, []);\n  const handleAddSchedule = () => {\n    setEditingSchedule(null);\n    setShowForm(true);\n  };\n  const handleEditSchedule = (schedule: Schedule) => {\n    setEditingSchedule(schedule);\n    setShowForm(true);\n  };\n  const handleCloseForm = () => {\n    setShowForm(false);\n    setEditingSchedule(null);\n  };\n  const handleScheduleClick = (schedule: Schedule) => {\n    setEditingSchedule(schedule);\n    setShowForm(true);\n  };\n  const handleDateClick = (_date: Date) => {\n    // 날짜 클릭 시 해당 날짜로 일정 추가 폼 열기\n    // TODO: 선택한 날짜로 초기값 설정\n    setEditingSchedule(null);\n    setShowForm(true);\n  };\n\n  // 필터링된 일정 목록\n  const filteredSchedules = useMemo(() => {\n    return schedules.filter(schedule => {\n      // 일정 타입 필터\n      if (filters.scheduleType.length > 0 && !filters.scheduleType.includes(schedule.scheduleType)) {\n        return false;\n      }\n\n      // 상태 필터\n      if (filters.status.length > 0 && !filters.status.includes(schedule.status)) {\n        return false;\n      }\n\n      // 건축주 필터\n      if (filters.clientId && schedule.clientId !== filters.clientId) {\n        return false;\n      }\n\n      // 검색어 필터\n      if (filters.searchText) {\n        const searchLower = filters.searchText.toLowerCase();\n        const titleMatch = schedule.title.toLowerCase().includes(searchLower);\n        const descMatch = schedule.description?.toLowerCase().includes(searchLower);\n        const clientMatch = schedule.clientName?.toLowerCase().includes(searchLower);\n        const projectMatch = schedule.projectName?.toLowerCase().includes(searchLower);\n        if (!titleMatch && !descMatch && !clientMatch && !projectMatch) {\n          return false;\n        }\n      }\n      return true;\n    });\n  }, [schedules, filters]);\n\n  // 캘린더 뷰용 확장된 일정 목록 (반복 일정 포함)\n  const expandedSchedules = useMemo(() => {\n    // 현재 날짜 기준으로 ±2개월 범위의 일정 확장\n    const startDate = new Date(currentDate);\n    startDate.setMonth(startDate.getMonth() - 2);\n    const endDate = new Date(currentDate);\n    endDate.setMonth(endDate.getMonth() + 2);\n    const formatDate = (date: Date) => {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    };\n    return expandSchedulesForDateRange(filteredSchedules, formatDate(startDate), formatDate(endDate));\n  }, [filteredSchedules, currentDate]);\n\n  // 건축주 목록 (필터용)\n  const clientOptions = useMemo(() => {\n    return clients.map(client => ({\n      id: client.id,\n      name: client.name\n    }));\n  }, [clients]);\n  return /*@million jsx-skip*/<Schedules_1 v0={() => setShowGoogleSync(true)} v1={handleAddSchedule} v2={() => setViewMode('list')} v3={`px-4 py-2 rounded-lg ${viewMode === 'list' ? 'bg-blue-600 text-white dark:bg-blue-500' : 'bg-white text-gray-700 dark:bg-gray-800 dark:text-gray-300'}`} v4={() => setViewMode('day')} v5={`px-4 py-2 rounded-lg ${viewMode === 'day' ? 'bg-blue-600 text-white dark:bg-blue-500' : 'bg-white text-gray-700 dark:bg-gray-800 dark:text-gray-300'}`} v6={() => setViewMode('week')} v7={`px-4 py-2 rounded-lg ${viewMode === 'week' ? 'bg-blue-600 text-white dark:bg-blue-500' : 'bg-white text-gray-700 dark:bg-gray-800 dark:text-gray-300'}`} v8={() => setViewMode('calendar')} v9={`px-4 py-2 rounded-lg ${viewMode === 'calendar' ? 'bg-blue-600 text-white dark:bg-blue-500' : 'bg-white text-gray-700 dark:bg-gray-800 dark:text-gray-300'}`} v10={<ScheduleFilters clients={clientOptions} onFilterChange={setFilters} />} v11={viewMode === 'list' && <ScheduleList schedules={filteredSchedules} onEdit={handleEditSchedule} />} v12={viewMode === 'day' && <ScheduleDayView schedules={expandedSchedules} currentDate={currentDate} onDateChange={setCurrentDate} onScheduleClick={handleScheduleClick} />} v13={viewMode === 'week' && <ScheduleWeekView schedules={expandedSchedules} currentDate={currentDate} onDateChange={setCurrentDate} onScheduleClick={handleScheduleClick} />} v14={viewMode === 'calendar' && <ScheduleCalendar schedules={expandedSchedules} currentDate={currentDate} onDateChange={setCurrentDate} onScheduleClick={handleScheduleClick} onDateClick={handleDateClick} />} v15={showForm && <ScheduleForm schedule={editingSchedule} onClose={handleCloseForm} />} v16={showGoogleSync && <GoogleCalendarSync onClose={() => setShowGoogleSync(false)} />} />;\n};\nimport { block as _block } from \"million/react\";\n/* eslint-disable */\nimport { useState, useEffect, useMemo } from 'react';\nimport { useApp } from '../../contexts/AppContext';\nimport ScheduleList from './ScheduleList';\nimport ScheduleCalendar from './ScheduleCalendar';\nimport ScheduleWeekView from './ScheduleWeekView';\nimport ScheduleDayView from './ScheduleDayView';\nimport ScheduleForm from './ScheduleForm';\nimport ScheduleFilters, { type FilterState } from './ScheduleFilters';\nimport GoogleCalendarSync from './GoogleCalendarSync';\nimport type { Schedule } from '../../types/domain';\nimport { expandSchedulesForDateRange } from '../../utils/scheduleRecurrence';\ntype ViewMode = 'list' | 'calendar' | 'week' | 'day';\nexport default Schedules;"],"names":["STORAGE_BUCKET","async","uploadFile","file","userId","scheduleId","size","success","error","fileExt","name","split","pop","fileName","concat","Date","now","Math","random","toString","substring","filePath","supabase","storage","from","upload","cacheControl","upsert","console","message","data","publicUrl","getPublicUrl","url","path","getFileIcon","_fileName$split$pop","jpg","jpeg","png","gif","pdf","doc","docx","xls","xlsx","ppt","pptx","zip","rar","txt","toLowerCase","ScheduleList_1","_compiledBlock","_jsxs","className","children","_jsx","ScheduleList_2","ScheduleList_3","_props3","v0","portals","_ref","schedules","onEdit","deleteSchedule","saveSchedule","useApp","log","length","map","schedule","type","scheduleType","construction","consultation","meeting","other","value","status","onChange","e","newStatus","updatedSchedule","_objectSpread","updatedAt","toISOString","handleStatusChange","target","onClick","stopPropagation","title","description","startDate","startTime","clientName","location","attachments","attachment","index","href","rel","handleDelete","id","window","confirm","ScheduleCalendar_1","_props","v1","v2","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","v3","v4","v5","currentDate","onDateChange","onScheduleClick","onDateClick","calendarDays","useMemo","daysInMonth","date","getFullYear","getMonth","getDate","firstDay","getDay","getFirstDayOfMonth","days","i","push","fullDate","getPriorityColor","priority","navigateToday","navigatePrevMonth","newDate","setMonth","navigateNextMonth","day","daySchedules","dateString","filter","getSchedulesForDate","isTodayDate","today","isToday","_Fragment","slice","ScheduleWeekView_1","getWeekDates","diff","sunday","setDate","weekDates","weekDate","hours","result","getSchedulesForDateTime","hour","dateSchedules","allDay","parseInt","start","end","startMonth","endMonth","getWeekRange","navigatePrevWeek","navigateNextWeek","dayIndex","ScheduleDayView_1","v6","v7","v8","v9","getStatusIcon","year","month","dayName","getDateString","navigatePrevDay","navigateNextDay","s","hourSchedules","getSchedulesForHour","endTime","projectName","expandRecurringSchedule","endDate","isRecurring","recurrenceRule","instances","frequency","interval","recurrenceEndDate","daysOfWeek","scheduleStart","recurrenceEnd","effectiveEnd","dayOfWeek","includes","addInterval","instance","formatDate","getTime","undefined","setFullYear","String","padStart","isScheduleOverlap","schedule1","schedule2","start1","end1","start2","end2","toDateString","time1Start","parseTime","time1End","time2Start","time2End","time","minutes","Number","getEndDateForExpansion","_schedule$recurrenceR","formatConflictMessage","conflicts","conflict","c","join","ScheduleForm_1","onSubmit","required","rows","v10","v11","checked","v12","v13","htmlFor","v14","v15","v16","v17","v18","v19","v20","v21","v22","v23","v24","v25","v26","v27","v28","v29","v30","v31","v32","v33","v34","multiple","v35","disabled","v36","v37","v38","v39","v40","v41","onClose","clients","setTitle","useState","setDescription","setScheduleType","setStartDate","setStartTime","setEndDate","setEndTime","setAllDay","clientId","setClientId","setLocation","setStatus","setPriority","notes","setNotes","reminderEnabled","setReminderEnabled","reminderMinutesBefore","setReminderMinutesBefore","setIsRecurring","recurrenceFrequency","setRecurrenceFrequency","recurrenceInterval","setRecurrenceInterval","setRecurrenceEndDate","recurrenceDaysOfWeek","setRecurrenceDaysOfWeek","setConflicts","showConflictWarning","setShowConflictWarning","setAttachments","uploadingFiles","setUploadingFiles","useEffect","trim","detectedConflicts","newSchedule","existingSchedules","newScheduleInstances","forEach","existingSchedule","existingInstances","newInstance","existingInstance","find","detectScheduleConflicts","createdAt","_clients$find","preventDefault","alert","fillRule","clipRule","client","min","max","files","user","auth","getUser","newAttachments","_","handleRemoveAttachment","ScheduleFilters_1","placeholder","onFilterChange","showFilters","setShowFilters","filters","setFilters","searchText","activeFilterCount","newFilters","handleSearchChange","handleReset","resetFilters","label","icon","newTypes","t","handleTypeToggle","newStatuses","handleStatusToggle","clientIdStr","isNaN","handleClientChange","GOOGLE_CLIENT_ID","process","REACT_APP_GOOGLE_CLIENT_ID","GOOGLE_API_KEY","REACT_APP_GOOGLE_API_KEY","DISCOVERY_DOCS","gapiInitialized","tokenClient","authenticateGoogleCalendar","missing","Promise","resolve","gapiScript","document","createElement","src","defer","onload","gapi","load","init","apiKey","discoveryDocs","gisScript","google","accounts","oauth2","initTokenClient","client_id","scope","callback","head","appendChild","initGoogleApi","response","error_description","getToken","requestAccessToken","prompt","isGoogleCalendarAuthenticated","scheduleToGoogleEvent","event","summary","startDateTime","endDateTime","dateTime","timeZone","rrule","toUpperCase","replace","dayNames","byDay","recurrence","reminders","useDefault","overrides","method","googleEventToSchedule","_event$end","_event$end$dateTime","_event$end2","isAllDay","created","updated","syncWithGoogleCalendar","localSchedules","options","imported","exported","failed","importFromGoogle","Error","calendar","events","list","calendarId","timeMin","timeMax","showDeleted","singleEvents","maxResults","orderBy","items","importFromGoogleCalendar","exportToGoogle","insert","resource","exportToGoogleCalendar","GoogleCalendarSync_1","isAuthenticated","setIsAuthenticated","syncing","setSyncing","syncResult","setSyncResult","setOptions","handleSignOut","token","revoke","access_token","setToken","signOutGoogleCalendar","Schedules_1","viewMode","setViewMode","setCurrentDate","showForm","setShowForm","showGoogleSync","setShowGoogleSync","editingSchedule","setEditingSchedule","handleScheduleClick","filteredSchedules","_schedule$description","_schedule$clientName","_schedule$projectName","searchLower","titleMatch","descMatch","clientMatch","projectMatch","expandedSchedules","expandSchedulesForDateRange","clientOptions","handleAddSchedule","ScheduleFilters","ScheduleList","ScheduleDayView","ScheduleWeekView","ScheduleCalendar","_date","ScheduleForm","handleCloseForm","GoogleCalendarSync"],"sourceRoot":""}
{"version":3,"file":"static/js/93.fd9d584f.chunk.js","mappings":"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","sources":["pages/Settings.tsx"],"sourcesContent":["import { compiledBlock as _compiledBlock } from \"million/react\";\nimport { block as _block } from \"million/react\";\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UserCircleIcon, EnvelopeIcon, LockClosedIcon, ArrowRightOnRectangleIcon, CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/outline';\nimport { supabase } from '../services/supabase';\nimport { useUser } from '../contexts/UserContext';\nconst Settings_1 = _compiledBlock(_props => <div className=\"max-w-4xl mx-auto px-4 py-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-gray-100\">설정</h1>\n        <p className=\"mt-2 text-gray-600 dark:text-gray-300\">계정 정보를 관리하세요</p>\n      </div>\n\n      {/* 현재 사용자 정보 */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4 flex items-center\">\n          {_props.v0}\n          현재 로그인 정보\n        </h2>\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center\">\n            <span className=\"font-medium text-gray-700 dark:text-gray-300 w-32\">로그인 방식:</span>\n            <span className=\"text-gray-900 dark:text-gray-100\">{_props.v1}</span>\n          </div>\n          <div className=\"flex items-center\">\n            <span className=\"font-medium text-gray-700 dark:text-gray-300 w-32\">이름:</span>\n            <span className=\"text-gray-900 dark:text-gray-100\">{_props.v2}</span>\n          </div>\n          <div className=\"flex items-center\">\n            <span className=\"font-medium text-gray-700 dark:text-gray-300 w-32\">이메일:</span>\n            <span className=\"text-gray-900 dark:text-gray-100\">{_props.v3}</span>\n          </div>\n          {_props.v4}\n        </div>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* 이름 변경 */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4 flex items-center\">\n            {_props.v5}\n            이름 변경\n          </h2>\n          <form onSubmit={_props.v6} className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"newName\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                새 이름\n              </label>\n              <input id=\"newName\" type=\"text\" value={_props.v7} onChange={_props.v8} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\" placeholder=\"새 이름을 입력하세요\" />\n            </div>\n\n            {_props.v9}\n\n            {_props.v10}\n\n            <button type=\"submit\" disabled={_props.v11} className=\"w-full bg-blue-600 text-white py-2.5 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\">\n              {_props.v12}\n            </button>\n          </form>\n        </div>\n\n        {/* 이메일 변경 - 이메일 로그인 사용자만 */}\n        {_props.v13}\n\n        {/* 비밀번호 변경 - 이메일 로그인 사용자만 */}\n        {_props.v14}\n\n        {/* 로그아웃 */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4 flex items-center\">\n            {_props.v15}\n            로그아웃\n          </h2>\n          <p className=\"text-gray-600 dark:text-gray-300 mb-4\">모든 기기에서 로그아웃됩니다.</p>\n          <button type=\"button\" onClick={_props.v16} className=\"w-full bg-red-600 text-white py-2.5 px-4 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 transition-colors\">\n            로그아웃\n          </button>\n        </div>\n      </div>\n    </div>, {\n  name: \"Settings_1\",\n  portals: [\"v0\", \"v1\", \"v2\", \"v3\", \"v4\", \"v5\", \"v9\", \"v10\", \"v12\", \"v13\", \"v14\", \"v15\"]\n});\nconst Settings: React.FC = () => {\n  const navigate = useNavigate();\n  const {\n    currentUser,\n    logout\n  } = useUser();\n  const [userEmail, setUserEmail] = useState('');\n  const [userName, setUserName] = useState('');\n  const [provider, setProvider] = useState<'email' | 'google' | 'kakao' | null>(null);\n\n  // 이름 변경\n  const [newName, setNewName] = useState('');\n  const [nameLoading, setNameLoading] = useState(false);\n  const [nameSuccess, setNameSuccess] = useState('');\n  const [nameError, setNameError] = useState('');\n\n  // 이메일 변경\n  const [newEmail, setNewEmail] = useState('');\n  const [emailLoading, setEmailLoading] = useState(false);\n  const [emailSuccess, setEmailSuccess] = useState('');\n  const [emailError, setEmailError] = useState('');\n\n  // 비밀번호 변경\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [passwordLoading, setPasswordLoading] = useState(false);\n  const [passwordSuccess, setPasswordSuccess] = useState('');\n  const [passwordError, setPasswordError] = useState('');\n\n  // 사용자 정보 로드\n  useEffect(() => {\n    const loadUserInfo = async () => {\n      if (currentUser !== null && currentUser !== undefined) {\n        setUserEmail(currentUser.username !== null && currentUser.username !== undefined ? currentUser.username : '');\n        setUserName(currentUser.name !== null && currentUser.name !== undefined ? currentUser.name : '');\n        setNewName(currentUser.name !== null && currentUser.name !== undefined ? currentUser.name : '');\n        setNewEmail(currentUser.username !== null && currentUser.username !== undefined ? currentUser.username : '');\n      }\n\n      // Supabase에서 provider 정보 가져오기\n      if (supabase !== null) {\n        try {\n          const {\n            data: {\n              user\n            }\n          } = await supabase.auth.getUser();\n          if (user !== null && user !== undefined) {\n            // identities 배열에서 provider 확인 (더 정확함)\n            let detectedProvider: 'email' | 'google' | 'kakao' = 'email';\n            if (user.identities && user.identities.length > 0) {\n              const identity = user.identities[0];\n              const identityProvider = identity.provider;\n\n              // provider 매핑: google, kakao 등\n              if (identityProvider === 'google') {\n                detectedProvider = 'google';\n              } else if (identityProvider === 'kakao') {\n                detectedProvider = 'kakao';\n              } else {\n                detectedProvider = 'email';\n              }\n            } else {\n              // identities가 없으면 app_metadata.provider 사용\n              const providerValue = user.app_metadata?.provider;\n              if (providerValue === 'google') {\n                detectedProvider = 'google';\n              } else if (providerValue === 'kakao') {\n                detectedProvider = 'kakao';\n              } else {\n                detectedProvider = 'email';\n              }\n            }\n            setProvider(detectedProvider);\n          }\n        } catch (err) {\n          // 에러 시 기본값 email\n          setProvider('email');\n        }\n      }\n    };\n    void loadUserInfo();\n  }, [currentUser]);\n\n  // 로그인 방식 표시 이름\n  const getProviderName = (prov: 'email' | 'google' | 'kakao' | null): string => {\n    if (prov === 'google') return 'Google 로그인';\n    if (prov === 'kakao') return 'Kakao 로그인';\n    if (prov === 'email') return '이메일 로그인';\n    return '알 수 없음';\n  };\n\n  // SNS 로그인 여부\n  const isSocialLogin = provider === 'google' || provider === 'kakao';\n  const handleUpdateName = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (supabase === null || supabase === undefined) return;\n    setNameLoading(true);\n    setNameError('');\n    setNameSuccess('');\n    if (newName.trim() === '') {\n      setNameError('이름을 입력해주세요.');\n      setNameLoading(false);\n      return;\n    }\n    try {\n      const {\n        error\n      } = await supabase.auth.updateUser({\n        data: {\n          name: newName\n        }\n      });\n      if (error !== null && error !== undefined) {\n        setNameError(error.message);\n      } else {\n        setNameSuccess('이름이 성공적으로 변경되었습니다.');\n        setUserName(newName);\n      }\n    } catch (err) {\n      setNameError('이름 변경 중 오류가 발생했습니다.');\n    } finally {\n      setNameLoading(false);\n    }\n  };\n  const handleUpdateEmail = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (supabase === null || supabase === undefined) return;\n    setEmailLoading(true);\n    setEmailError('');\n    setEmailSuccess('');\n    if (newEmail.trim() === '' || !newEmail.includes('@')) {\n      setEmailError('유효한 이메일을 입력해주세요.');\n      setEmailLoading(false);\n      return;\n    }\n    if (newEmail === userEmail) {\n      setEmailError('현재 이메일과 동일합니다.');\n      setEmailLoading(false);\n      return;\n    }\n    try {\n      const {\n        error\n      } = await supabase.auth.updateUser({\n        email: newEmail\n      });\n      if (error !== null && error !== undefined) {\n        setEmailError(error.message);\n      } else {\n        setEmailSuccess('이메일 변경 확인 메일이 발송되었습니다. 새 이메일에서 확인해주세요.');\n      }\n    } catch (err) {\n      setEmailError('이메일 변경 중 오류가 발생했습니다.');\n    } finally {\n      setEmailLoading(false);\n    }\n  };\n  const handleUpdatePassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (supabase === null || supabase === undefined) return;\n    setPasswordLoading(true);\n    setPasswordError('');\n    setPasswordSuccess('');\n\n    // eslint-disable-next-line no-magic-numbers\n    if (newPassword.length < 6) {\n      setPasswordError('새 비밀번호는 최소 6자 이상이어야 합니다.');\n      setPasswordLoading(false);\n      return;\n    }\n    if (newPassword !== confirmPassword) {\n      setPasswordError('새 비밀번호가 일치하지 않습니다.');\n      setPasswordLoading(false);\n      return;\n    }\n    try {\n      const {\n        error\n      } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n      if (error !== null && error !== undefined) {\n        setPasswordError(error.message);\n      } else {\n        setPasswordSuccess('비밀번호가 성공적으로 변경되었습니다.');\n        setNewPassword('');\n        setConfirmPassword('');\n      }\n    } catch (err) {\n      setPasswordError('비밀번호 변경 중 오류가 발생했습니다.');\n    } finally {\n      setPasswordLoading(false);\n    }\n  };\n  const handleLogout = async () => {\n    if (!window.confirm('로그아웃 하시겠습니까?')) {\n      return;\n    }\n    logout();\n    navigate('/');\n  };\n  return /*@million jsx-skip*/<Settings_1 v0={<UserCircleIcon className=\"w-6 h-6 mr-2 text-blue-600 dark:text-blue-400\" />} v1={getProviderName(provider)} v2={userName !== '' && userName !== null ? userName : '(없음)'} v3={userEmail} v4={isSocialLogin && <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-md\">\n              <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                SNS 로그인 사용자는 {getProviderName(provider)} 계정에서 정보를 관리합니다.\n              </p>\n            </div>} v5={<UserCircleIcon className=\"w-6 h-6 mr-2 text-blue-600 dark:text-blue-400\" />} v6={handleUpdateName} v7={newName} v8={e => setNewName(e.target.value)} v9={nameError !== '' && <div className=\"flex items-center p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md\">\n                <XCircleIcon className=\"w-5 h-5 text-red-600 dark:text-red-400 mr-2\" />\n                <p className=\"text-red-700 dark:text-red-300 text-sm\">{nameError}</p>\n              </div>} v10={nameSuccess !== '' && <div className=\"flex items-center p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-md\">\n                <CheckCircleIcon className=\"w-5 h-5 text-green-600 dark:text-green-400 mr-2\" />\n                <p className=\"text-green-700 dark:text-green-300 text-sm\">{nameSuccess}</p>\n              </div>} v11={nameLoading} v12={nameLoading ? '변경 중...' : '이름 변경'} v13={!isSocialLogin && <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4 flex items-center\">\n              <EnvelopeIcon className=\"w-6 h-6 mr-2 text-blue-600 dark:text-blue-400\" />\n              이메일 변경\n            </h2>\n            <form onSubmit={handleUpdateEmail} className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"newEmail\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                새 이메일\n              </label>\n              <input id=\"newEmail\" type=\"email\" value={newEmail} onChange={e => setNewEmail(e.target.value)} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\" placeholder=\"새 이메일을 입력하세요\" />\n            </div>\n\n            {emailError !== '' && <div className=\"flex items-center p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md\">\n                <XCircleIcon className=\"w-5 h-5 text-red-600 dark:text-red-400 mr-2\" />\n                <p className=\"text-red-700 dark:text-red-300 text-sm\">{emailError}</p>\n              </div>}\n\n            {emailSuccess !== '' && <div className=\"flex items-center p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-md\">\n                <CheckCircleIcon className=\"w-5 h-5 text-green-600 dark:text-green-400 mr-2\" />\n                <p className=\"text-green-700 dark:text-green-300 text-sm\">{emailSuccess}</p>\n              </div>}\n\n            <button type=\"submit\" disabled={emailLoading} className=\"w-full bg-blue-600 text-white py-2.5 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\">\n              {emailLoading ? '변경 중...' : '이메일 변경'}\n            </button>\n            <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n              * 이메일 변경 시 새 이메일로 확인 메일이 발송됩니다.\n            </p>\n          </form>\n        </div>} v14={!isSocialLogin && <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-md p-6\">\n            <h2 className=\"text-xl font-semibold text-gray-900 dark:text-gray-100 mb-4 flex items-center\">\n              <LockClosedIcon className=\"w-6 h-6 mr-2 text-blue-600 dark:text-blue-400\" />\n              비밀번호 변경\n            </h2>\n            <form onSubmit={handleUpdatePassword} className=\"space-y-4\">\n            <div>\n              <label htmlFor=\"newPassword\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                새 비밀번호\n              </label>\n              <input id=\"newPassword\" type=\"password\" value={newPassword} onChange={e => setNewPassword(e.target.value)} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\" placeholder=\"새 비밀번호 (최소 6자)\" />\n            </div>\n\n            <div>\n              <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                새 비밀번호 확인\n              </label>\n              <input id=\"confirmPassword\" type=\"password\" value={confirmPassword} onChange={e => setConfirmPassword(e.target.value)} className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\" placeholder=\"새 비밀번호 확인\" />\n            </div>\n\n            {passwordError !== '' && <div className=\"flex items-center p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md\">\n                <XCircleIcon className=\"w-5 h-5 text-red-600 dark:text-red-400 mr-2\" />\n                <p className=\"text-red-700 dark:text-red-300 text-sm\">{passwordError}</p>\n              </div>}\n\n            {passwordSuccess !== '' && <div className=\"flex items-center p-3 bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-md\">\n                <CheckCircleIcon className=\"w-5 h-5 text-green-600 dark:text-green-400 mr-2\" />\n                <p className=\"text-green-700 dark:text-green-300 text-sm\">{passwordSuccess}</p>\n              </div>}\n\n            <button type=\"submit\" disabled={passwordLoading} className=\"w-full bg-blue-600 text-white py-2.5 px-4 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\">\n              {passwordLoading ? '변경 중...' : '비밀번호 변경'}\n            </button>\n          </form>\n        </div>} v15={<ArrowRightOnRectangleIcon className=\"w-6 h-6 mr-2 text-red-600 dark:text-red-400\" />} v16={handleLogout} />;\n};\nexport default Settings;"],"names":["Settings_1","_compiledBlock","_props","_jsxs","className","children","_jsx","v0","v1","v2","v3","v4","v5","onSubmit","v6","htmlFor","id","type","value","v7","onChange","v8","placeholder","v9","v10","disabled","v11","v12","v13","v14","v15","onClick","v16","name","portals","Settings","navigate","useNavigate","currentUser","logout","useUser","userEmail","setUserEmail","useState","userName","setUserName","provider","setProvider","newName","setNewName","nameLoading","setNameLoading","nameSuccess","setNameSuccess","nameError","setNameError","newEmail","setNewEmail","emailLoading","setEmailLoading","emailSuccess","setEmailSuccess","emailError","setEmailError","newPassword","setNewPassword","confirmPassword","setConfirmPassword","passwordLoading","setPasswordLoading","passwordSuccess","setPasswordSuccess","passwordError","setPasswordError","useEffect","async","undefined","username","supabase","data","user","auth","getUser","detectedProvider","identities","length","identityProvider","_user$app_metadata","providerValue","app_metadata","err","loadUserInfo","getProviderName","prov","isSocialLogin","UserCircleIcon","e","preventDefault","trim","error","updateUser","message","target","XCircleIcon","CheckCircleIcon","EnvelopeIcon","includes","email","LockClosedIcon","password","ArrowRightOnRectangleIcon","window","confirm"],"sourceRoot":""}
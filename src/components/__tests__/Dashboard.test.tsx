import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';
import Dashboard from '../Dashboard';
import type { Invoice, Estimate, Client, WorkItem, CompanyInfo } from '../../types';

// Mock logger
jest.mock('../../utils/logger', () => ({
  logger: {
    error: jest.fn(),
    info: jest.fn(),
    warn: jest.fn(),
  }
}));

// Mock useApp hook
jest.mock('../../contexts/AppContext', () => ({
  useApp: jest.fn()
}));

const mockCompanyInfo: CompanyInfo = {
  name: 'ÌÖåÏä§Ìä∏ Í±¥ÏÑ§',
  ceo: 'ÌôçÍ∏∏Îèô',
  address: 'ÏÑúÏö∏Ïãú Í∞ïÎÇ®Íµ¨',
  contact: '02-1234-5678',
  businessNumber: '123-45-67890',
  email: 'test@test.com'
};

const mockClients: Client[] = [
  { id: 1, name: 'Í±¥Ï∂ïÏ£º1', contact: '010-1111-1111', address: 'Ï£ºÏÜå1', email: 'client1@test.com' },
  { id: 2, name: 'Í±¥Ï∂ïÏ£º2', contact: '010-2222-2222', address: 'Ï£ºÏÜå2', email: 'client2@test.com' }
];

const mockInvoices: Invoice[] = [
  {
    id: 1,
    client: 'Í±¥Ï∂ïÏ£º1',
    date: '2025-10-05',
    amount: 5000000,
    status: 'Í≤∞Ï†úÏôÑÎ£å',
    items: [],
    invoiceNumber: 'INV-001'
  },
  {
    id: 2,
    client: 'Í±¥Ï∂ïÏ£º2',
    date: '2025-10-04',
    amount: 3000000,
    status: 'Î∞úÏÜ°Îê®',
    items: [],
    invoiceNumber: 'INV-002'
  },
  {
    id: 3,
    client: 'Í±¥Ï∂ïÏ£º1',
    date: '2025-10-03',
    amount: 2000000,
    status: 'ÎåÄÍ∏∞Ï§ë',
    items: [],
    invoiceNumber: 'INV-003'
  }
];

const mockEstimates: Estimate[] = [
  {
    id: 1,
    clientName: 'Í±¥Ï∂ïÏ£º1',
    date: '2025-10-05',
    totalAmount: 10000000,
    status: 'ÏäπÏù∏Îê®',
    items: []
  },
  {
    id: 2,
    clientName: 'Í±¥Ï∂ïÏ£º2',
    date: '2025-10-04',
    totalAmount: 8000000,
    status: 'ÎåÄÍ∏∞Ï§ë',
    items: []
  }
];

const mockWorkItems: WorkItem[] = [];
const mockUnits = ['Í∞ú', 'm', 'm¬≤'];
const mockCategories = ['ÏûêÏû¨', 'Ïù∏Í±¥ÎπÑ'];

const renderDashboard = (overrides = {}) => {
  const { useApp } = require('../../contexts/AppContext');

  const mockContext = {
    invoices: mockInvoices,
    clients: mockClients,
    estimates: mockEstimates,
    workItems: mockWorkItems,
    companyInfo: mockCompanyInfo,
    units: mockUnits,
    categories: mockCategories,
    stampImage: null,
    setInvoices: jest.fn(),
    setClients: jest.fn(),
    setEstimates: jest.fn(),
    setWorkItems: jest.fn(),
    setCompanyInfo: jest.fn(),
    setUnits: jest.fn(),
    setCategories: jest.fn(),
    setStampImage: jest.fn(),
    addWorkItemToInvoice: jest.fn(),
    ...overrides
  };

  useApp.mockReturnValue(mockContext);

  return render(
    <BrowserRouter>
      <Dashboard />
    </BrowserRouter>
  );
};

describe('Dashboard Component', () => {
  describe('Î†åÎçîÎßÅ', () => {
    it('ÎåÄÏãúÎ≥¥Îìú Ï†úÎ™©Í≥º ÏÑ§Î™ÖÏù¥ ÌëúÏãúÎê®', () => {
      renderDashboard();
      expect(screen.getByText('ÎåÄÏãúÎ≥¥Îìú')).toBeInTheDocument();
      expect(screen.getByText('Ï≤≠Íµ¨ÏÑú Î∞úÌñâ ÌòÑÌô©ÏùÑ ÌïúÎààÏóê ÌôïÏù∏ÌïòÏÑ∏Ïöî')).toBeInTheDocument();
    });

    it('Î∞±ÏóÖ ÏïàÎÇ¥ Î¨∏Íµ¨Í∞Ä ÌëúÏãúÎê®', () => {
      renderDashboard();
      expect(screen.getByText(/ÏûëÏóÖ Ï¢ÖÎ£å Ïãú ÏÉÅÎã®Ïùò 'Î∞±ÏóÖ' Î≤ÑÌäºÏùÑ ÎàåÎü¨ Îç∞Ïù¥ÌÑ∞Î•º Î≥¥Í¥ÄÌïòÏÑ∏Ïöî/)).toBeInTheDocument();
    });
  });

  describe('ÌÜµÍ≥Ñ Ïπ¥Îìú', () => {
    it('Ï†ÑÏ≤¥ Ï≤≠Íµ¨Ïï°Ïù¥ Ïò¨Î∞îÎ•¥Í≤å Í≥ÑÏÇ∞Îê®', () => {
      renderDashboard();
      // 5,000,000 + 3,000,000 + 2,000,000 = 10,000,000
      expect(screen.getByText('Ï†ÑÏ≤¥ Ï≤≠Íµ¨Ïï°')).toBeInTheDocument();
      // Ïó¨Îü¨ Í≥≥Ïóê Í∞ôÏùÄ Í∏àÏï°Ïù¥ ÏûàÏùÑ Ïàò ÏûàÏúºÎØÄÎ°ú getAllByText ÏÇ¨Ïö©
      const amounts = screen.getAllByText('‚Ç©10,000,000Ïõê');
      expect(amounts.length).toBeGreaterThan(0);
    });

    it('Í≤∞Ï†úÏôÑÎ£å Í∏àÏï°Ïù¥ Ïò¨Î∞îÎ•¥Í≤å Í≥ÑÏÇ∞Îê®', () => {
      renderDashboard();
      // Í≤∞Ï†úÏôÑÎ£å ÏÉÅÌÉúÏù∏ Ï≤≠Íµ¨ÏÑúÎßå: 5,000,000
      const paymentStatuses = screen.getAllByText('Í≤∞Ï†úÏôÑÎ£å');
      expect(paymentStatuses.length).toBeGreaterThan(0);
      const amounts = screen.getAllByText('‚Ç©5,000,000Ïõê');
      expect(amounts.length).toBeGreaterThan(0);
    });

    it('ÎØ∏ÏàòÍ∏àÏù¥ Ïò¨Î∞îÎ•¥Í≤å Í≥ÑÏÇ∞Îê®', () => {
      renderDashboard();
      // Ï†ÑÏ≤¥ - Í≤∞Ï†úÏôÑÎ£å = 10,000,000 - 5,000,000 = 5,000,000
      expect(screen.getByText('ÎØ∏ÏàòÍ∏à(ÏöîÏïΩ)')).toBeInTheDocument();
      const misuElements = screen.getAllByText('‚Ç©5,000,000Ïõê');
      expect(misuElements.length).toBeGreaterThan(0);
    });

    it('Îì±Î°ùÎêú Í±¥Ï∂ïÏ£º ÏàòÍ∞Ä ÌëúÏãúÎê®', () => {
      renderDashboard();
      expect(screen.getByText('Îì±Î°ùÎêú Í±¥Ï∂ïÏ£º')).toBeInTheDocument();
      expect(screen.getByText('2Î™Ö')).toBeInTheDocument();
    });

    it('ÌÜµÍ≥Ñ Ïπ¥Îìú ÏïÑÏù¥ÏΩòÏù¥ ÌëúÏãúÎê®', () => {
      renderDashboard();
      // ÏïÑÏù¥ÏΩò Ïù¥Î™®ÏßÄ ÌôïÏù∏
      expect(screen.getByText('üìä')).toBeInTheDocument();
      expect(screen.getByText('üí∞')).toBeInTheDocument();
      expect(screen.getByText('‚úÖ')).toBeInTheDocument();
      expect(screen.getByText('üë•')).toBeInTheDocument();
    });
  });

  describe('Î∞±ÏóÖ Í∏∞Îä•', () => {
    it('Î∞±ÏóÖ Î≤ÑÌäºÏù¥ ÌëúÏãúÎê®', () => {
      renderDashboard();
      expect(screen.getByText('Î∞±ÏóÖ')).toBeInTheDocument();
      expect(screen.getByText('Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•')).toBeInTheDocument();
    });

    it('Î∞±ÏóÖ Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Îã§Ïö¥Î°úÎìú ÎèôÏûë', () => {
      // Mock URL.createObjectURL and revokeObjectURL
      const createObjectURL = jest.fn(() => 'blob:mock-url');
      const revokeObjectURL = jest.fn();
      global.URL.createObjectURL = createObjectURL;
      global.URL.revokeObjectURL = revokeObjectURL;

      renderDashboard();

      const backupButton = screen.getByTitle('Î™®Îì† Îç∞Ïù¥ÌÑ∞Î•º JSONÏúºÎ°ú Ï†ÄÏû•');
      fireEvent.click(backupButton);

      expect(createObjectURL).toHaveBeenCalled();
      expect(revokeObjectURL).toHaveBeenCalledWith('blob:mock-url');
    });
  });

  describe('Î≥µÏõê Í∏∞Îä•', () => {
    it('Î≥µÏõê Î≤ÑÌäºÏù¥ ÌëúÏãúÎê®', () => {
      renderDashboard();
      expect(screen.getByText('Î≥µÏõê')).toBeInTheDocument();
      expect(screen.getByText('Îç∞Ïù¥ÌÑ∞ Î≥µÍµ¨')).toBeInTheDocument();
    });

    it('Ïò¨Î∞îÎ•∏ JSON ÌååÏùº Î≥µÏõê Ïãú ÏÑ±Í≥µ Î©îÏãúÏßÄ ÌëúÏãú', async () => {
      const mockSetCompanyInfo = jest.fn();
      const mockSetClients = jest.fn();

      global.alert = jest.fn();

      renderDashboard({
        setCompanyInfo: mockSetCompanyInfo,
        setClients: mockSetClients
      });

      const restoreButton = screen.getByTitle('Î∞±ÏóÖ JSONÏóêÏÑú Î≥µÏõê');
      const fileInput = restoreButton.parentElement?.querySelector('input[type="file"]') as HTMLInputElement;

      const mockData = {
        companyInfo: mockCompanyInfo,
        clients: mockClients,
        invoices: [],
        estimates: [],
        workItems: [],
        units: [],
        categories: []
      };

      const mockFile = new File(
        [JSON.stringify(mockData)],
        'backup.json',
        { type: 'application/json' }
      );

      // Mock the File.text() method
      mockFile.text = jest.fn().mockResolvedValue(JSON.stringify(mockData));

      Object.defineProperty(fileInput, 'files', {
        value: [mockFile],
        configurable: true
      });

      fireEvent.change(fileInput);

      await waitFor(() => {
        expect(global.alert).toHaveBeenCalledWith('Îç∞Ïù¥ÌÑ∞ Î≥µÏõêÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.');
      });
    });

    it('ÏûòÎ™ªÎêú JSON ÌååÏùº Î≥µÏõê Ïãú Ïò§Î•ò Î©îÏãúÏßÄ ÌëúÏãú', async () => {
      global.alert = jest.fn();

      renderDashboard();

      const restoreButton = screen.getByTitle('Î∞±ÏóÖ JSONÏóêÏÑú Î≥µÏõê');
      const fileInput = restoreButton.parentElement?.querySelector('input[type="file"]') as HTMLInputElement;

      const mockFile = new File(['invalid json'], 'backup.json', { type: 'application/json' });

      Object.defineProperty(fileInput, 'files', {
        value: [mockFile],
        configurable: true
      });

      fireEvent.change(fileInput);

      await waitFor(() => {
        expect(global.alert).toHaveBeenCalledWith('Î≥µÏõê Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïò¨Î∞îÎ•∏ Î∞±ÏóÖ ÌååÏùºÏù∏ÏßÄ ÌôïÏù∏ÌïòÏÑ∏Ïöî.');
      });
    });
  });

  describe('ÏµúÍ∑º Ï≤≠Íµ¨ÏÑú', () => {
    it('ÏµúÍ∑º Ï≤≠Íµ¨ÏÑú ÏÑπÏÖòÏù¥ ÌëúÏãúÎê®', () => {
      renderDashboard();
      expect(screen.getByText('ÏµúÍ∑º Ï≤≠Íµ¨ÏÑú')).toBeInTheDocument();
    });

    it('ÏµúÍ∑º Ï≤≠Íµ¨ÏÑú Î™©Î°ùÏù¥ ÎÇ†ÏßúÏàúÏúºÎ°ú Ï†ïÎ†¨Îê® (ÏµúÏã†Ïàú)', () => {
      renderDashboard();
      const clientNames = screen.getAllByText(/Í±¥Ï∂ïÏ£º[12]/);
      // Ï≤´ Î≤àÏß∏Îäî 2025-10-05 (Í±¥Ï∂ïÏ£º1)
      expect(clientNames[0]).toHaveTextContent('Í±¥Ï∂ïÏ£º1');
    });

    it('Ï≤≠Íµ¨ÏÑúÍ∞Ä ÏóÜÏùÑ Îïå ÏïàÎÇ¥ Î©îÏãúÏßÄ ÌëúÏãú', () => {
      renderDashboard({ invoices: [] });
      expect(screen.getByText('ÏïÑÏßÅ Ï≤≠Íµ¨ÏÑúÍ∞Ä ÏóÜÏäµÎãàÎã§')).toBeInTheDocument();
    });

    it('Ï≤≠Íµ¨ÏÑú ÏÉÅÌÉúÎ≥Ñ ÏÉâÏÉÅ ÌëúÏãú', () => {
      renderDashboard();
      // Í≤∞Ï†úÏôÑÎ£å: green, Î∞úÏÜ°Îê®: blue, ÎåÄÍ∏∞Ï§ë: yellow
      const statusBadges = screen.getAllByText(/Í≤∞Ï†úÏôÑÎ£å|Î∞úÏÜ°Îê®|ÎåÄÍ∏∞Ï§ë/);
      expect(statusBadges.length).toBeGreaterThan(0);
    });

    it('ÎçîÎ≥¥Í∏∞ ÎßÅÌÅ¨Í∞Ä /invoicesÎ°ú Ïó∞Í≤∞Îê®', () => {
      renderDashboard();
      const moreLinks = screen.getAllByText('ÎçîÎ≥¥Í∏∞');
      const invoiceMoreLink = moreLinks[0].closest('a');
      expect(invoiceMoreLink).toHaveAttribute('href', '/invoices');
    });
  });

  describe('ÏµúÍ∑º Í≤¨Ï†ÅÏÑú', () => {
    it('ÏµúÍ∑º Í≤¨Ï†ÅÏÑú ÏÑπÏÖòÏù¥ ÌëúÏãúÎê®', () => {
      renderDashboard();
      expect(screen.getByText('ÏµúÍ∑º Í≤¨Ï†ÅÏÑú')).toBeInTheDocument();
    });

    it('Í≤¨Ï†ÅÏÑúÍ∞Ä ÏóÜÏùÑ Îïå ÏïàÎÇ¥ Î©îÏãúÏßÄ ÌëúÏãú', () => {
      renderDashboard({ estimates: [] });
      expect(screen.getByText('ÏïÑÏßÅ Í≤¨Ï†ÅÏÑúÍ∞Ä ÏóÜÏäµÎãàÎã§')).toBeInTheDocument();
    });

    it('Í≤¨Ï†ÅÏÑú Í∏àÏï°Ïù¥ Ïò¨Î∞îÎ•¥Í≤å ÌëúÏãúÎê®', () => {
      renderDashboard();
      const tenMillion = screen.getAllByText('‚Ç©10,000,000Ïõê');
      expect(tenMillion.length).toBeGreaterThan(0);
      const eightMillion = screen.getAllByText('‚Ç©8,000,000Ïõê');
      expect(eightMillion.length).toBeGreaterThan(0);
    });

    it('ÎçîÎ≥¥Í∏∞ ÎßÅÌÅ¨Í∞Ä /estimatesÎ°ú Ïó∞Í≤∞Îê®', () => {
      renderDashboard();
      const moreLinks = screen.getAllByText('ÎçîÎ≥¥Í∏∞');
      const estimateMoreLink = moreLinks[1].closest('a');
      expect(estimateMoreLink).toHaveAttribute('href', '/estimates');
    });
  });

  describe('ÌÜµÌôî ÌòïÏãù', () => {
    it('Í∏àÏï°Ïù¥ ÌïúÍµ≠ ÏõêÌôî ÌòïÏãùÏúºÎ°ú ÌëúÏãúÎê®', () => {
      renderDashboard();
      // ‚Ç©10,000,000Ïõê ÌòïÏãù ÌôïÏù∏
      const amounts = screen.getAllByText(/‚Ç©[\d,]+Ïõê/);
      expect(amounts.length).toBeGreaterThan(0);
    });

    it('0ÏõêÎèÑ Ïò¨Î∞îÎ•¥Í≤å ÌëúÏãúÎê®', () => {
      renderDashboard({ invoices: [] });
      const zeroAmounts = screen.getAllByText('‚Ç©0Ïõê');
      expect(zeroAmounts.length).toBeGreaterThan(0);
    });
  });
});
